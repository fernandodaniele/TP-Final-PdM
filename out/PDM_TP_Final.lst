
misProgramas/PDM_TP_Final/out/PDM_TP_Final.elf:     file format elf32-littlearm
misProgramas/PDM_TP_Final/out/PDM_TP_Final.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000895

Program Header:
0x70000001 off    0x0001282c vaddr 0x1a00282c paddr 0x1a00282c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000158 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002834 memsz 0x00002834 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002834 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002828  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a002834  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000158  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a002828  1a002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00282c  1a00282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  100001a0  100001a0  00020048  2**2
                  CONTENTS
 19 .debug_info   00026996  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004f23  00000000  00000000  000469de  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000081b5  00000000  00000000  0004b901  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a78  00000000  00000000  00053ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000af8  00000000  00000000  0005452e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000e19a  00000000  00000000  00055026  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000147de  00000000  00000000  000631c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000281d4  00000000  00000000  0007799e  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009fb72  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0009fbda  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001978  00000000  00000000  0009fc0c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002828 l    d  .init_array	00000000 .init_array
1a00282c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001a0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 menu.c
00000000 l    df *ABS*	00000000 teclas.c
00000000 l    df *ABS*	00000000 pantalla.c
00000000 l    df *ABS*	00000000 PDM_TP_Final.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 board.c
1a000920 l     F .text	00000044 Board_LED_Init
1a000964 l     F .text	00000040 Board_TEC_Init
1a0009a4 l     F .text	00000040 Board_GPIO_Init
1a0009e4 l     F .text	00000030 Board_ADC_Init
1a000a14 l     F .text	00000038 Board_SPI_Init
1a000a4c l     F .text	00000024 Board_I2C_Init
1a002584 l     O .text	00000008 GpioButtons
1a00258c l     O .text	0000000c GpioLeds
1a002598 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0025b0 l     O .text	00000004 InitClkStates
1a0025b4 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000bf8 l     F .text	0000002c Chip_UART_GetIndex
1a002628 l     O .text	00000008 UART_BClock
1a002630 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000d94 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000da8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000e70 l     F .text	000000a0 pll_calc_divs
1a000f10 l     F .text	0000010c pll_get_frac
1a00101c l     F .text	0000004c Chip_Clock_FindBaseClock
1a001290 l     F .text	00000022 Chip_Clock_GetDivRate
10000050 l     O .bss	00000008 audio_usb_pll_freq
1a002644 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0026b0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001558 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00156c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0026f8 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000058 l     O .bss	00000004 callBackFuncParams
10000060 l     O .bss	00000008 tickCounter
10000068 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001804 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000006c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_button.c
1a001b80 l     F .text	00000010 buttonInitState
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a00282c l       .init_array	00000000 __init_array_end
1a002828 l       .bss_RAM5	00000000 __preinit_array_end
1a002828 l       .init_array	00000000 __init_array_start
1a002828 l       .bss_RAM5	00000000 __preinit_array_start
1a0010b4 g     F .text	0000001c Chip_Clock_GetDividerSource
10000078 g     O .bss	00000048 myButton2
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000ac4 g     F .text	00000008 __stdio_init
1a001d60 g     F .text	0000003e delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000e4e g     F .text	0000000c Chip_ADC_SetResolution
1a0004a0 g     F .text	000000a4 iniciarTeclas
1a0017d8 g     F .text	0000002c SysTick_Handler
1a000c78 g     F .text	00000040 Chip_UART_SetBaud
1a0007dc g     F .text	0000005a prenderLed
1a000890  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002834 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6ffa g       *ABS*	00000000 __valid_user_code_checksum
1a002834 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001b48 g     F .text	00000006 buttonEventGet
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001332 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001da0 g     F .text	00000000 .hidden __aeabi_uldivmod
100001a0 g       .noinit	00000000 _noinit
1a001722 g     F .text	00000016 uartWriteString
10000198 g     O .bss	00000004 SystemCoreClock
1a000c24 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a001bae g     F .text	0000004a buttonInit
1a000180  w    F .text	00000002 UsageFault_Handler
1a0013b0 g     F .text	0000004c Chip_Clock_GetRate
1a000836 g     F .text	0000005a apagarLed
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000b04 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001b58 g     F .text	0000001a buttonIsUp
1a000544 g     F .text	0000002c actualizarTeclas
1a001dd0 g     F .text	000002d0 .hidden __udivmoddi4
1a002580 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00282c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0020a4 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
10000000 g     O .data	00000004 pantallaPrevia
1a000a94 g     F .text	00000030 Board_Init
1a00091e  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
100000c0 g     O .bss	00000048 myButton4
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100001a0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000894 g     F .text	00000088 Reset_Handler
1a00175c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000bc0 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001068 g     F .text	0000004c Chip_Clock_EnableCrystal
10000070 g     O .bss	00000001 pantalla
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a001b90 g     F .text	0000001e buttonFsmInit
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000b9c g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001224 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002740 g     O .text	000000e6 gpioPinsInit
1a001708 g     F .text	0000001a uartWriteByte
1a001584 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a00130c g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a000e1c g     F .text	00000032 Chip_ADC_SetSampleRate
1a001d40 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001596 g     F .text	0000003e Chip_SSP_SetBitRate
1a0013fc g     F .text	00000002 Chip_GPIO_Init
1a0025ac g     O .text	00000004 OscRateIn
1a001b72 g     F .text	0000000e buttonIsDown
1a00168c g     F .text	0000007c uartInit
100001a0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000570 g     F .text	00000068 consultarTeclas
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001838 g     F .text	000001ac gpioInit
1a0005d8 g     F .text	0000000e iniciarPantalla
1a0020a0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001ab8 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a000300 g     F .text	0000000c errorMEF
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0010d0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001bf8 g     F .text	00000148 buttonFsmUpdate
1a0020ec g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00076c g     F .text	00000070 main
1000004c g     O .bss	00000004 ultimoBoton
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001660 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001340 g     F .text	0000003c Chip_Clock_EnableOpts
1a0010ec g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0011a4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00160c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0019e4 g     F .text	0000006a gpioWrite
1a00091c  w    F .text	00000002 _fini
1a000ddc g     F .text	00000040 Chip_ADC_Init
1000019c g     O .bss	00000004 g_pUsbApi
1a000acc g     F .text	00000038 Board_SetupMuxing
1a000cb8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001738 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001678 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0005e8 g     F .text	00000184 muestraPantalla
10000000 g       .data	00000000 _data
100001a0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0015d4 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001b4e g     F .text	0000000a buttonEventHandled
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000a70 g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a00030c g     F .text	0000000c iniciarMEF
1a000b7c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001400 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000e5c g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
10000048 g     O .bss	00000004 pulsador
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
10000108 g     O .bss	00000048 myButton3
1a0020a0  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a00137c g     F .text	00000034 Chip_Clock_Enable
10000150 g     O .bss	00000048 myButton1
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001a4e g     F .text	00000068 gpioRead
1a000318 g     F .text	00000188 actualizarMEF
1a001ad4 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001744 g     F .text	00000018 tickPowerSet
1a0012b4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001644 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000b70 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 95 08 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a fa 6f ff 53     }............o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	d9 17 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	b9 1a 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002834 	.word	0x1a002834
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a002834 	.word	0x1a002834
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002834 	.word	0x1a002834
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002834 	.word	0x1a002834
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002834 	.word	0x1a002834
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000158 	.word	0x00000158
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <errorMEF>:
pantalla_t pantalla;

// Función para controlar errores de la MEF (Error handler)
void errorMEF( void )
{
   pantalla = PANTALLA_A;
1a000300:	4b01      	ldr	r3, [pc, #4]	; (1a000308 <errorMEF+0x8>)
1a000302:	2200      	movs	r2, #0
1a000304:	701a      	strb	r2, [r3, #0]
}
1a000306:	4770      	bx	lr
1a000308:	10000070 	.word	0x10000070

1a00030c <iniciarMEF>:

// Función para iniciar la MEF
void iniciarMEF( void )
{
   pantalla = PANTALLA_A;   // Set initial state
1a00030c:	4b01      	ldr	r3, [pc, #4]	; (1a000314 <iniciarMEF+0x8>)
1a00030e:	2200      	movs	r2, #0
1a000310:	701a      	strb	r2, [r3, #0]
}
1a000312:	4770      	bx	lr
1a000314:	10000070 	.word	0x10000070

1a000318 <actualizarMEF>:

// Función para actualizar la MEF
void actualizarMEF( int opcion )
{
1a000318:	b510      	push	{r4, lr}
1a00031a:	4604      	mov	r4, r0
   switch( pantalla ){
1a00031c:	4b5f      	ldr	r3, [pc, #380]	; (1a00049c <actualizarMEF+0x184>)
1a00031e:	781b      	ldrb	r3, [r3, #0]
1a000320:	2b0a      	cmp	r3, #10
1a000322:	f200 80b7 	bhi.w	1a000494 <actualizarMEF+0x17c>
1a000326:	e8df f003 	tbb	[pc, r3]
1a00032a:	2406      	.short	0x2406
1a00032c:	5d544b42 	.word	0x5d544b42
1a000330:	9d948b6d 	.word	0x9d948b6d
1a000334:	ac          	.byte	0xac
1a000335:	00          	.byte	0x00
      case PANTALLA_A:
    	  muestraPantalla(PANTALLA_A);
1a000336:	2000      	movs	r0, #0
1a000338:	f000 f956 	bl	1a0005e8 <muestraPantalla>
    	  switch (opcion){
1a00033c:	3c01      	subs	r4, #1
1a00033e:	2c03      	cmp	r4, #3
1a000340:	d813      	bhi.n	1a00036a <actualizarMEF+0x52>
1a000342:	e8df f004 	tbb	[pc, r4]
1a000346:	0602      	.short	0x0602
1a000348:	0e0a      	.short	0x0e0a
             case 1:
            	 pantalla = PANTALLA_B;
1a00034a:	4b54      	ldr	r3, [pc, #336]	; (1a00049c <actualizarMEF+0x184>)
1a00034c:	2201      	movs	r2, #1
1a00034e:	701a      	strb	r2, [r3, #0]
            	 break;
1a000350:	e050      	b.n	1a0003f4 <actualizarMEF+0xdc>
             case 2:
            	 pantalla = PANTALLA_C;
1a000352:	4b52      	ldr	r3, [pc, #328]	; (1a00049c <actualizarMEF+0x184>)
1a000354:	2205      	movs	r2, #5
1a000356:	701a      	strb	r2, [r3, #0]
                 break;
1a000358:	e04c      	b.n	1a0003f4 <actualizarMEF+0xdc>
             case 3:
            	 pantalla = PANTALLA_D;
1a00035a:	4b50      	ldr	r3, [pc, #320]	; (1a00049c <actualizarMEF+0x184>)
1a00035c:	2206      	movs	r2, #6
1a00035e:	701a      	strb	r2, [r3, #0]
                 break;
1a000360:	e048      	b.n	1a0003f4 <actualizarMEF+0xdc>
             case 4:
            	 pantalla = PANTALLA_E;
1a000362:	4b4e      	ldr	r3, [pc, #312]	; (1a00049c <actualizarMEF+0x184>)
1a000364:	220a      	movs	r2, #10
1a000366:	701a      	strb	r2, [r3, #0]
                 break;
1a000368:	e044      	b.n	1a0003f4 <actualizarMEF+0xdc>
             default:
            	 pantalla = PANTALLA_A;
1a00036a:	4b4c      	ldr	r3, [pc, #304]	; (1a00049c <actualizarMEF+0x184>)
1a00036c:	2200      	movs	r2, #0
1a00036e:	701a      	strb	r2, [r3, #0]
            	 break;
1a000370:	e040      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	  }
    	  break;

      case PANTALLA_B:
         muestraPantalla(PANTALLA_B);
1a000372:	2001      	movs	r0, #1
1a000374:	f000 f938 	bl	1a0005e8 <muestraPantalla>
    	 switch (opcion){
1a000378:	3c01      	subs	r4, #1
1a00037a:	2c03      	cmp	r4, #3
1a00037c:	d813      	bhi.n	1a0003a6 <actualizarMEF+0x8e>
1a00037e:	e8df f004 	tbb	[pc, r4]
1a000382:	0602      	.short	0x0602
1a000384:	0e0a      	.short	0x0e0a
            case 1:
               pantalla = PANTALLA_B1;
1a000386:	4b45      	ldr	r3, [pc, #276]	; (1a00049c <actualizarMEF+0x184>)
1a000388:	2202      	movs	r2, #2
1a00038a:	701a      	strb	r2, [r3, #0]
               break;
1a00038c:	e032      	b.n	1a0003f4 <actualizarMEF+0xdc>
            case 2:
               pantalla = PANTALLA_B2;
1a00038e:	4b43      	ldr	r3, [pc, #268]	; (1a00049c <actualizarMEF+0x184>)
1a000390:	2203      	movs	r2, #3
1a000392:	701a      	strb	r2, [r3, #0]
               break;
1a000394:	e02e      	b.n	1a0003f4 <actualizarMEF+0xdc>
            case 3:
               pantalla = PANTALLA_B3;
1a000396:	4b41      	ldr	r3, [pc, #260]	; (1a00049c <actualizarMEF+0x184>)
1a000398:	2204      	movs	r2, #4
1a00039a:	701a      	strb	r2, [r3, #0]
               break;
1a00039c:	e02a      	b.n	1a0003f4 <actualizarMEF+0xdc>
            case 4:
               pantalla = PANTALLA_A;
1a00039e:	4b3f      	ldr	r3, [pc, #252]	; (1a00049c <actualizarMEF+0x184>)
1a0003a0:	2200      	movs	r2, #0
1a0003a2:	701a      	strb	r2, [r3, #0]
               break;
1a0003a4:	e026      	b.n	1a0003f4 <actualizarMEF+0xdc>
            default:
               pantalla = PANTALLA_B;
1a0003a6:	4b3d      	ldr	r3, [pc, #244]	; (1a00049c <actualizarMEF+0x184>)
1a0003a8:	2201      	movs	r2, #1
1a0003aa:	701a      	strb	r2, [r3, #0]
               break;
1a0003ac:	e022      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 }
         break;

      case PANTALLA_B1:
         muestraPantalla(PANTALLA_B1);
1a0003ae:	2002      	movs	r0, #2
1a0003b0:	f000 f91a 	bl	1a0005e8 <muestraPantalla>
    	 if(opcion==4){
1a0003b4:	2c04      	cmp	r4, #4
1a0003b6:	d11d      	bne.n	1a0003f4 <actualizarMEF+0xdc>
            pantalla = PANTALLA_B;
1a0003b8:	4b38      	ldr	r3, [pc, #224]	; (1a00049c <actualizarMEF+0x184>)
1a0003ba:	2201      	movs	r2, #1
1a0003bc:	701a      	strb	r2, [r3, #0]
1a0003be:	e019      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 }
    	 break;

      case PANTALLA_B2:
         muestraPantalla(PANTALLA_B2);
1a0003c0:	2003      	movs	r0, #3
1a0003c2:	f000 f911 	bl	1a0005e8 <muestraPantalla>
    	 if(opcion==4){
1a0003c6:	2c04      	cmp	r4, #4
1a0003c8:	d114      	bne.n	1a0003f4 <actualizarMEF+0xdc>
            pantalla = PANTALLA_B;
1a0003ca:	4b34      	ldr	r3, [pc, #208]	; (1a00049c <actualizarMEF+0x184>)
1a0003cc:	2201      	movs	r2, #1
1a0003ce:	701a      	strb	r2, [r3, #0]
1a0003d0:	e010      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 }
    	 break;

      case PANTALLA_B3:
         muestraPantalla(PANTALLA_B3);
1a0003d2:	2004      	movs	r0, #4
1a0003d4:	f000 f908 	bl	1a0005e8 <muestraPantalla>
    	 if(opcion==4){
1a0003d8:	2c04      	cmp	r4, #4
1a0003da:	d10b      	bne.n	1a0003f4 <actualizarMEF+0xdc>
            pantalla = PANTALLA_B;
1a0003dc:	4b2f      	ldr	r3, [pc, #188]	; (1a00049c <actualizarMEF+0x184>)
1a0003de:	2201      	movs	r2, #1
1a0003e0:	701a      	strb	r2, [r3, #0]
1a0003e2:	e007      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 }
    	 break;

      case PANTALLA_C:
         muestraPantalla(PANTALLA_C);
1a0003e4:	2005      	movs	r0, #5
1a0003e6:	f000 f8ff 	bl	1a0005e8 <muestraPantalla>
    	 prenderLed('v');
1a0003ea:	2076      	movs	r0, #118	; 0x76
1a0003ec:	f000 f9f6 	bl	1a0007dc <prenderLed>
    	 if(opcion==4){
1a0003f0:	2c04      	cmp	r4, #4
1a0003f2:	d000      	beq.n	1a0003f6 <actualizarMEF+0xde>

      default:
    	 errorMEF();
    	 break;
   }
}
1a0003f4:	bd10      	pop	{r4, pc}
    	    pantalla = PANTALLA_A;
1a0003f6:	4b29      	ldr	r3, [pc, #164]	; (1a00049c <actualizarMEF+0x184>)
1a0003f8:	2200      	movs	r2, #0
1a0003fa:	701a      	strb	r2, [r3, #0]
    		apagarLed('v');
1a0003fc:	2076      	movs	r0, #118	; 0x76
1a0003fe:	f000 fa1a 	bl	1a000836 <apagarLed>
1a000402:	e7f7      	b.n	1a0003f4 <actualizarMEF+0xdc>
         muestraPantalla(PANTALLA_D);
1a000404:	2006      	movs	r0, #6
1a000406:	f000 f8ef 	bl	1a0005e8 <muestraPantalla>
    	 switch (opcion){
1a00040a:	3c01      	subs	r4, #1
1a00040c:	2c03      	cmp	r4, #3
1a00040e:	d813      	bhi.n	1a000438 <actualizarMEF+0x120>
1a000410:	e8df f004 	tbb	[pc, r4]
1a000414:	0e0a0602 	.word	0x0e0a0602
               pantalla = PANTALLA_D1;
1a000418:	4b20      	ldr	r3, [pc, #128]	; (1a00049c <actualizarMEF+0x184>)
1a00041a:	2207      	movs	r2, #7
1a00041c:	701a      	strb	r2, [r3, #0]
               break;
1a00041e:	e7e9      	b.n	1a0003f4 <actualizarMEF+0xdc>
               pantalla = PANTALLA_D2;
1a000420:	4b1e      	ldr	r3, [pc, #120]	; (1a00049c <actualizarMEF+0x184>)
1a000422:	2208      	movs	r2, #8
1a000424:	701a      	strb	r2, [r3, #0]
               break;
1a000426:	e7e5      	b.n	1a0003f4 <actualizarMEF+0xdc>
               pantalla = PANTALLA_D3;
1a000428:	4b1c      	ldr	r3, [pc, #112]	; (1a00049c <actualizarMEF+0x184>)
1a00042a:	2209      	movs	r2, #9
1a00042c:	701a      	strb	r2, [r3, #0]
               break;
1a00042e:	e7e1      	b.n	1a0003f4 <actualizarMEF+0xdc>
               pantalla = PANTALLA_A;
1a000430:	4b1a      	ldr	r3, [pc, #104]	; (1a00049c <actualizarMEF+0x184>)
1a000432:	2200      	movs	r2, #0
1a000434:	701a      	strb	r2, [r3, #0]
               break;
1a000436:	e7dd      	b.n	1a0003f4 <actualizarMEF+0xdc>
               pantalla = PANTALLA_D;
1a000438:	4b18      	ldr	r3, [pc, #96]	; (1a00049c <actualizarMEF+0x184>)
1a00043a:	2206      	movs	r2, #6
1a00043c:	701a      	strb	r2, [r3, #0]
               break;
1a00043e:	e7d9      	b.n	1a0003f4 <actualizarMEF+0xdc>
         muestraPantalla(PANTALLA_D1);
1a000440:	2007      	movs	r0, #7
1a000442:	f000 f8d1 	bl	1a0005e8 <muestraPantalla>
    	 if(opcion==4){
1a000446:	2c04      	cmp	r4, #4
1a000448:	d1d4      	bne.n	1a0003f4 <actualizarMEF+0xdc>
            pantalla = PANTALLA_D;
1a00044a:	4b14      	ldr	r3, [pc, #80]	; (1a00049c <actualizarMEF+0x184>)
1a00044c:	2206      	movs	r2, #6
1a00044e:	701a      	strb	r2, [r3, #0]
1a000450:	e7d0      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 muestraPantalla(PANTALLA_D2);
1a000452:	2008      	movs	r0, #8
1a000454:	f000 f8c8 	bl	1a0005e8 <muestraPantalla>
    	 if(opcion==4){
1a000458:	2c04      	cmp	r4, #4
1a00045a:	d1cb      	bne.n	1a0003f4 <actualizarMEF+0xdc>
            pantalla = PANTALLA_D;
1a00045c:	4b0f      	ldr	r3, [pc, #60]	; (1a00049c <actualizarMEF+0x184>)
1a00045e:	2206      	movs	r2, #6
1a000460:	701a      	strb	r2, [r3, #0]
1a000462:	e7c7      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 muestraPantalla(PANTALLA_D3);
1a000464:	2009      	movs	r0, #9
1a000466:	f000 f8bf 	bl	1a0005e8 <muestraPantalla>
    	 prenderLed('v');
1a00046a:	2076      	movs	r0, #118	; 0x76
1a00046c:	f000 f9b6 	bl	1a0007dc <prenderLed>
    	 if(opcion==4){
1a000470:	2c04      	cmp	r4, #4
1a000472:	d1bf      	bne.n	1a0003f4 <actualizarMEF+0xdc>
            pantalla = PANTALLA_D;
1a000474:	4b09      	ldr	r3, [pc, #36]	; (1a00049c <actualizarMEF+0x184>)
1a000476:	2206      	movs	r2, #6
1a000478:	701a      	strb	r2, [r3, #0]
            apagarLed('v');
1a00047a:	2076      	movs	r0, #118	; 0x76
1a00047c:	f000 f9db 	bl	1a000836 <apagarLed>
1a000480:	e7b8      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 muestraPantalla(PANTALLA_E);
1a000482:	200a      	movs	r0, #10
1a000484:	f000 f8b0 	bl	1a0005e8 <muestraPantalla>
    	 if(opcion==4){
1a000488:	2c04      	cmp	r4, #4
1a00048a:	d1b3      	bne.n	1a0003f4 <actualizarMEF+0xdc>
            pantalla = PANTALLA_A;
1a00048c:	4b03      	ldr	r3, [pc, #12]	; (1a00049c <actualizarMEF+0x184>)
1a00048e:	2200      	movs	r2, #0
1a000490:	701a      	strb	r2, [r3, #0]
1a000492:	e7af      	b.n	1a0003f4 <actualizarMEF+0xdc>
    	 errorMEF();
1a000494:	f7ff ff34 	bl	1a000300 <errorMEF>
}
1a000498:	e7ac      	b.n	1a0003f4 <actualizarMEF+0xdc>
1a00049a:	bf00      	nop
1a00049c:	10000070 	.word	0x10000070

1a0004a0 <iniciarTeclas>:
button_t myButton1;
button_t myButton2;
button_t myButton3;
button_t myButton4;

void iniciarTeclas(){
1a0004a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0004a4:	b08d      	sub	sp, #52	; 0x34
   buttonInit( &myButton1,                  // Button structure (object)
1a0004a6:	2500      	movs	r5, #0
1a0004a8:	950a      	str	r5, [sp, #40]	; 0x28
1a0004aa:	9509      	str	r5, [sp, #36]	; 0x24
1a0004ac:	9508      	str	r5, [sp, #32]
1a0004ae:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
1a0004b2:	f04f 0900 	mov.w	r9, #0
1a0004b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a0004ba:	2401      	movs	r4, #1
1a0004bc:	9404      	str	r4, [sp, #16]
1a0004be:	9403      	str	r4, [sp, #12]
1a0004c0:	9402      	str	r4, [sp, #8]
1a0004c2:	2632      	movs	r6, #50	; 0x32
1a0004c4:	2700      	movs	r7, #0
1a0004c6:	e9cd 6700 	strd	r6, r7, [sp]
1a0004ca:	4622      	mov	r2, r4
1a0004cc:	2124      	movs	r1, #36	; 0x24
1a0004ce:	4819      	ldr	r0, [pc, #100]	; (1a000534 <iniciarTeclas+0x94>)
1a0004d0:	f001 fb6d 	bl	1a001bae <buttonInit>
               0,                           // pressedCallback
               0,                           // releasedCallback
               0                            // holdPressedCallback
             );

    buttonInit( &myButton2,                  // Button structure (object)
1a0004d4:	950a      	str	r5, [sp, #40]	; 0x28
1a0004d6:	9509      	str	r5, [sp, #36]	; 0x24
1a0004d8:	9508      	str	r5, [sp, #32]
1a0004da:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a0004de:	9404      	str	r4, [sp, #16]
1a0004e0:	9403      	str	r4, [sp, #12]
1a0004e2:	9402      	str	r4, [sp, #8]
1a0004e4:	e9cd 6700 	strd	r6, r7, [sp]
1a0004e8:	4622      	mov	r2, r4
1a0004ea:	2125      	movs	r1, #37	; 0x25
1a0004ec:	4812      	ldr	r0, [pc, #72]	; (1a000538 <iniciarTeclas+0x98>)
1a0004ee:	f001 fb5e 	bl	1a001bae <buttonInit>
                0,                           // pressedCallback
                0,                           // releasedCallback
                0                            // holdPressedCallback
               );

   buttonInit( &myButton3,                  // Button structure (object)
1a0004f2:	950a      	str	r5, [sp, #40]	; 0x28
1a0004f4:	9509      	str	r5, [sp, #36]	; 0x24
1a0004f6:	9508      	str	r5, [sp, #32]
1a0004f8:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a0004fc:	9404      	str	r4, [sp, #16]
1a0004fe:	9403      	str	r4, [sp, #12]
1a000500:	9402      	str	r4, [sp, #8]
1a000502:	e9cd 6700 	strd	r6, r7, [sp]
1a000506:	4622      	mov	r2, r4
1a000508:	2126      	movs	r1, #38	; 0x26
1a00050a:	480c      	ldr	r0, [pc, #48]	; (1a00053c <iniciarTeclas+0x9c>)
1a00050c:	f001 fb4f 	bl	1a001bae <buttonInit>
               0,                           // pressedCallback
               0,                           // releasedCallback
               0                            // holdPressedCallback
             );

   buttonInit( &myButton4,                  // Button structure (object)
1a000510:	950a      	str	r5, [sp, #40]	; 0x28
1a000512:	9509      	str	r5, [sp, #36]	; 0x24
1a000514:	9508      	str	r5, [sp, #32]
1a000516:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a00051a:	9404      	str	r4, [sp, #16]
1a00051c:	9403      	str	r4, [sp, #12]
1a00051e:	9402      	str	r4, [sp, #8]
1a000520:	e9cd 6700 	strd	r6, r7, [sp]
1a000524:	4622      	mov	r2, r4
1a000526:	2127      	movs	r1, #39	; 0x27
1a000528:	4805      	ldr	r0, [pc, #20]	; (1a000540 <iniciarTeclas+0xa0>)
1a00052a:	f001 fb40 	bl	1a001bae <buttonInit>
	           2000,                        // holdPressedTime [ms]
	           0,                           // pressedCallback
	           0,                           // releasedCallback
	           0                            // holdPressedCallback
	          );
}
1a00052e:	b00d      	add	sp, #52	; 0x34
1a000530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a000534:	10000150 	.word	0x10000150
1a000538:	10000078 	.word	0x10000078
1a00053c:	10000108 	.word	0x10000108
1a000540:	100000c0 	.word	0x100000c0

1a000544 <actualizarTeclas>:
//actualiza la MEF de cada pulsador
void actualizarTeclas()
{
1a000544:	b508      	push	{r3, lr}
   buttonFsmUpdate( &myButton1 );
1a000546:	4806      	ldr	r0, [pc, #24]	; (1a000560 <actualizarTeclas+0x1c>)
1a000548:	f001 fb56 	bl	1a001bf8 <buttonFsmUpdate>
   buttonFsmUpdate( &myButton2 );
1a00054c:	4805      	ldr	r0, [pc, #20]	; (1a000564 <actualizarTeclas+0x20>)
1a00054e:	f001 fb53 	bl	1a001bf8 <buttonFsmUpdate>
   buttonFsmUpdate( &myButton3 );
1a000552:	4805      	ldr	r0, [pc, #20]	; (1a000568 <actualizarTeclas+0x24>)
1a000554:	f001 fb50 	bl	1a001bf8 <buttonFsmUpdate>
   buttonFsmUpdate( &myButton4 );
1a000558:	4804      	ldr	r0, [pc, #16]	; (1a00056c <actualizarTeclas+0x28>)
1a00055a:	f001 fb4d 	bl	1a001bf8 <buttonFsmUpdate>
}
1a00055e:	bd08      	pop	{r3, pc}
1a000560:	10000150 	.word	0x10000150
1a000564:	10000078 	.word	0x10000078
1a000568:	10000108 	.word	0x10000108
1a00056c:	100000c0 	.word	0x100000c0

1a000570 <consultarTeclas>:
//consulta si hubo un evento RELEASED en alguno de los pulsadores
int consultarTeclas()
{
1a000570:	b508      	push	{r3, lr}
   if( (buttonEventGet( &myButton1 ) == BUTTON_RELEASED) ) {
1a000572:	4815      	ldr	r0, [pc, #84]	; (1a0005c8 <consultarTeclas+0x58>)
1a000574:	f001 fae8 	bl	1a001b48 <buttonEventGet>
1a000578:	2802      	cmp	r0, #2
1a00057a:	d010      	beq.n	1a00059e <consultarTeclas+0x2e>
      buttonEventHandled( &myButton1 );
      return 1;
   }
   else if( (buttonEventGet( &myButton2 ) == BUTTON_RELEASED) ) {
1a00057c:	4813      	ldr	r0, [pc, #76]	; (1a0005cc <consultarTeclas+0x5c>)
1a00057e:	f001 fae3 	bl	1a001b48 <buttonEventGet>
1a000582:	2802      	cmp	r0, #2
1a000584:	d010      	beq.n	1a0005a8 <consultarTeclas+0x38>
      buttonEventHandled( &myButton2 );
      return 2;
   }
   else if( (buttonEventGet( &myButton3 ) == BUTTON_RELEASED) ) {
1a000586:	4812      	ldr	r0, [pc, #72]	; (1a0005d0 <consultarTeclas+0x60>)
1a000588:	f001 fade 	bl	1a001b48 <buttonEventGet>
1a00058c:	2802      	cmp	r0, #2
1a00058e:	d010      	beq.n	1a0005b2 <consultarTeclas+0x42>
      buttonEventHandled( &myButton3 );
      return 3;
   }
   else if( (buttonEventGet( &myButton4 ) == BUTTON_RELEASED) ) {
1a000590:	4810      	ldr	r0, [pc, #64]	; (1a0005d4 <consultarTeclas+0x64>)
1a000592:	f001 fad9 	bl	1a001b48 <buttonEventGet>
1a000596:	2802      	cmp	r0, #2
1a000598:	d010      	beq.n	1a0005bc <consultarTeclas+0x4c>
      buttonEventHandled( &myButton4 );
      return 4;
   }
   else{
      return 0;
1a00059a:	2000      	movs	r0, #0
   }
}
1a00059c:	bd08      	pop	{r3, pc}
      buttonEventHandled( &myButton1 );
1a00059e:	480a      	ldr	r0, [pc, #40]	; (1a0005c8 <consultarTeclas+0x58>)
1a0005a0:	f001 fad5 	bl	1a001b4e <buttonEventHandled>
      return 1;
1a0005a4:	2001      	movs	r0, #1
1a0005a6:	e7f9      	b.n	1a00059c <consultarTeclas+0x2c>
      buttonEventHandled( &myButton2 );
1a0005a8:	4808      	ldr	r0, [pc, #32]	; (1a0005cc <consultarTeclas+0x5c>)
1a0005aa:	f001 fad0 	bl	1a001b4e <buttonEventHandled>
      return 2;
1a0005ae:	2002      	movs	r0, #2
1a0005b0:	e7f4      	b.n	1a00059c <consultarTeclas+0x2c>
      buttonEventHandled( &myButton3 );
1a0005b2:	4807      	ldr	r0, [pc, #28]	; (1a0005d0 <consultarTeclas+0x60>)
1a0005b4:	f001 facb 	bl	1a001b4e <buttonEventHandled>
      return 3;
1a0005b8:	2003      	movs	r0, #3
1a0005ba:	e7ef      	b.n	1a00059c <consultarTeclas+0x2c>
      buttonEventHandled( &myButton4 );
1a0005bc:	4805      	ldr	r0, [pc, #20]	; (1a0005d4 <consultarTeclas+0x64>)
1a0005be:	f001 fac6 	bl	1a001b4e <buttonEventHandled>
      return 4;
1a0005c2:	2004      	movs	r0, #4
1a0005c4:	e7ea      	b.n	1a00059c <consultarTeclas+0x2c>
1a0005c6:	bf00      	nop
1a0005c8:	10000150 	.word	0x10000150
1a0005cc:	10000078 	.word	0x10000078
1a0005d0:	10000108 	.word	0x10000108
1a0005d4:	100000c0 	.word	0x100000c0

1a0005d8 <iniciarPantalla>:
} pantalla_t;

int pantallaPrevia=100; //para imprimir una sola vez la pantalla

void iniciarPantalla()
{
1a0005d8:	b508      	push	{r3, lr}
   uartConfig(UART_USB, 115200);
1a0005da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005de:	2003      	movs	r0, #3
1a0005e0:	f001 f854 	bl	1a00168c <uartInit>
}
1a0005e4:	bd08      	pop	{r3, pc}
1a0005e6:	Address 0x000000001a0005e6 is out of bounds.


1a0005e8 <muestraPantalla>:

void muestraPantalla(int pantalla)
{
1a0005e8:	b510      	push	{r4, lr}
1a0005ea:	4604      	mov	r4, r0
   switch( pantalla ){
1a0005ec:	280a      	cmp	r0, #10
1a0005ee:	d80b      	bhi.n	1a000608 <muestraPantalla+0x20>
1a0005f0:	e8df f000 	tbb	[pc, r0]
1a0005f4:	30251606 	.word	0x30251606
1a0005f8:	6051463b 	.word	0x6051463b
1a0005fc:	7e6f      	.short	0x7e6f
1a0005fe:	8d          	.byte	0x8d
1a0005ff:	00          	.byte	0x00
      case PANTALLA_A:
	     if(pantalla != pantallaPrevia){
1a000600:	4b4b      	ldr	r3, [pc, #300]	; (1a000730 <muestraPantalla+0x148>)
1a000602:	681b      	ldr	r3, [r3, #0]
1a000604:	4283      	cmp	r3, r0
1a000606:	d100      	bne.n	1a00060a <muestraPantalla+0x22>
	     }
	     break;
      default:
	     break;
	  }
}
1a000608:	bd10      	pop	{r4, pc}
            uartWriteString(UART_USB, "Seleccione la opcion que desea mediante el uso de los pulsadores.\r\n");
1a00060a:	494a      	ldr	r1, [pc, #296]	; (1a000734 <muestraPantalla+0x14c>)
1a00060c:	2003      	movs	r0, #3
1a00060e:	f001 f888 	bl	1a001722 <uartWriteString>
			uartWriteString(UART_USB, "1.Calibracion\r\n2.Titulacion\r\n3.Configuracion\r\n4.Conexion.\r\n\n");
1a000612:	4949      	ldr	r1, [pc, #292]	; (1a000738 <muestraPantalla+0x150>)
1a000614:	2003      	movs	r0, #3
1a000616:	f001 f884 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a00061a:	4b45      	ldr	r3, [pc, #276]	; (1a000730 <muestraPantalla+0x148>)
1a00061c:	601c      	str	r4, [r3, #0]
1a00061e:	e7f3      	b.n	1a000608 <muestraPantalla+0x20>
         if(pantalla != pantallaPrevia){
1a000620:	4b43      	ldr	r3, [pc, #268]	; (1a000730 <muestraPantalla+0x148>)
1a000622:	681b      	ldr	r3, [r3, #0]
1a000624:	4283      	cmp	r3, r0
1a000626:	d0ef      	beq.n	1a000608 <muestraPantalla+0x20>
		    uartWriteString(UART_USB, "Seleccione el patron con el cual desea calibrar el titulador:.\r\n");
1a000628:	4944      	ldr	r1, [pc, #272]	; (1a00073c <muestraPantalla+0x154>)
1a00062a:	2003      	movs	r0, #3
1a00062c:	f001 f879 	bl	1a001722 <uartWriteString>
			uartWriteString(UART_USB, "1.Buffer A\r\n2.Buffer B\r\n3.Buffer C\r\n4.Regresar.\r\n\n");
1a000630:	4943      	ldr	r1, [pc, #268]	; (1a000740 <muestraPantalla+0x158>)
1a000632:	2003      	movs	r0, #3
1a000634:	f001 f875 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a000638:	4b3d      	ldr	r3, [pc, #244]	; (1a000730 <muestraPantalla+0x148>)
1a00063a:	601c      	str	r4, [r3, #0]
1a00063c:	e7e4      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a00063e:	4b3c      	ldr	r3, [pc, #240]	; (1a000730 <muestraPantalla+0x148>)
1a000640:	681b      	ldr	r3, [r3, #0]
1a000642:	4283      	cmp	r3, r0
1a000644:	d0e0      	beq.n	1a000608 <muestraPantalla+0x20>
		    uartWriteString(UART_USB, "Se calibro el Buffer A. Presione 4 para regresar.\r\n\n");
1a000646:	493f      	ldr	r1, [pc, #252]	; (1a000744 <muestraPantalla+0x15c>)
1a000648:	2003      	movs	r0, #3
1a00064a:	f001 f86a 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a00064e:	4b38      	ldr	r3, [pc, #224]	; (1a000730 <muestraPantalla+0x148>)
1a000650:	601c      	str	r4, [r3, #0]
1a000652:	e7d9      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a000654:	4b36      	ldr	r3, [pc, #216]	; (1a000730 <muestraPantalla+0x148>)
1a000656:	681b      	ldr	r3, [r3, #0]
1a000658:	4283      	cmp	r3, r0
1a00065a:	d0d5      	beq.n	1a000608 <muestraPantalla+0x20>
		 uartWriteString(UART_USB, "Se calibro el Buffer B. Presione 4 para regresar.\r\n\n");
1a00065c:	493a      	ldr	r1, [pc, #232]	; (1a000748 <muestraPantalla+0x160>)
1a00065e:	2003      	movs	r0, #3
1a000660:	f001 f85f 	bl	1a001722 <uartWriteString>
		 pantallaPrevia = pantalla;
1a000664:	4b32      	ldr	r3, [pc, #200]	; (1a000730 <muestraPantalla+0x148>)
1a000666:	601c      	str	r4, [r3, #0]
1a000668:	e7ce      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a00066a:	4b31      	ldr	r3, [pc, #196]	; (1a000730 <muestraPantalla+0x148>)
1a00066c:	681b      	ldr	r3, [r3, #0]
1a00066e:	4283      	cmp	r3, r0
1a000670:	d0ca      	beq.n	1a000608 <muestraPantalla+0x20>
		 uartWriteString(UART_USB, "Se calibro el Buffer C. Presione 4 para regresar.\r\n\n");
1a000672:	4936      	ldr	r1, [pc, #216]	; (1a00074c <muestraPantalla+0x164>)
1a000674:	2003      	movs	r0, #3
1a000676:	f001 f854 	bl	1a001722 <uartWriteString>
		 pantallaPrevia = pantalla;
1a00067a:	4b2d      	ldr	r3, [pc, #180]	; (1a000730 <muestraPantalla+0x148>)
1a00067c:	601c      	str	r4, [r3, #0]
1a00067e:	e7c3      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a000680:	4b2b      	ldr	r3, [pc, #172]	; (1a000730 <muestraPantalla+0x148>)
1a000682:	681b      	ldr	r3, [r3, #0]
1a000684:	4283      	cmp	r3, r0
1a000686:	d0bf      	beq.n	1a000608 <muestraPantalla+0x20>
		    uartWriteString(UART_USB, "Se esta realizando la titulacion. Presione 4 para finalizar y regresar al menu anterior.\r\n\n");
1a000688:	4931      	ldr	r1, [pc, #196]	; (1a000750 <muestraPantalla+0x168>)
1a00068a:	2003      	movs	r0, #3
1a00068c:	f001 f849 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a000690:	4b27      	ldr	r3, [pc, #156]	; (1a000730 <muestraPantalla+0x148>)
1a000692:	601c      	str	r4, [r3, #0]
1a000694:	e7b8      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a000696:	4b26      	ldr	r3, [pc, #152]	; (1a000730 <muestraPantalla+0x148>)
1a000698:	681b      	ldr	r3, [r3, #0]
1a00069a:	4283      	cmp	r3, r0
1a00069c:	d0b4      	beq.n	1a000608 <muestraPantalla+0x20>
		    uartWriteString(UART_USB, "Seleccione la opcion que desea mediante el uso de los pulsadores.\r\n");
1a00069e:	4925      	ldr	r1, [pc, #148]	; (1a000734 <muestraPantalla+0x14c>)
1a0006a0:	2003      	movs	r0, #3
1a0006a2:	f001 f83e 	bl	1a001722 <uartWriteString>
			uartWriteString(UART_USB, "1.Configurar buffers\r\n2.Seleccionar volumen de corte\r\n3.Limpiar bomba\r\n4.Regresar al menu anterior\r\n\n");
1a0006a6:	492b      	ldr	r1, [pc, #172]	; (1a000754 <muestraPantalla+0x16c>)
1a0006a8:	2003      	movs	r0, #3
1a0006aa:	f001 f83a 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a0006ae:	4b20      	ldr	r3, [pc, #128]	; (1a000730 <muestraPantalla+0x148>)
1a0006b0:	601c      	str	r4, [r3, #0]
1a0006b2:	e7a9      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a0006b4:	4b1e      	ldr	r3, [pc, #120]	; (1a000730 <muestraPantalla+0x148>)
1a0006b6:	681b      	ldr	r3, [r3, #0]
1a0006b8:	4283      	cmp	r3, r0
1a0006ba:	d0a5      	beq.n	1a000608 <muestraPantalla+0x20>
		 uartWriteString(UART_USB, "En esta pantalla se podra cargar el valor correspondiente a cada uno de los tres patrones (buffers) a utilizar en la calibracion.\r\n");
1a0006bc:	4926      	ldr	r1, [pc, #152]	; (1a000758 <muestraPantalla+0x170>)
1a0006be:	2003      	movs	r0, #3
1a0006c0:	f001 f82f 	bl	1a001722 <uartWriteString>
		 uartWriteString(UART_USB, "Presione 4 para finalizar y regresar al menu anterior.\r\n\n");
1a0006c4:	4925      	ldr	r1, [pc, #148]	; (1a00075c <muestraPantalla+0x174>)
1a0006c6:	2003      	movs	r0, #3
1a0006c8:	f001 f82b 	bl	1a001722 <uartWriteString>
		 pantallaPrevia = pantalla;
1a0006cc:	4b18      	ldr	r3, [pc, #96]	; (1a000730 <muestraPantalla+0x148>)
1a0006ce:	601c      	str	r4, [r3, #0]
1a0006d0:	e79a      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a0006d2:	4b17      	ldr	r3, [pc, #92]	; (1a000730 <muestraPantalla+0x148>)
1a0006d4:	681b      	ldr	r3, [r3, #0]
1a0006d6:	4283      	cmp	r3, r0
1a0006d8:	d096      	beq.n	1a000608 <muestraPantalla+0x20>
		    uartWriteString(UART_USB, "En esta pantalla se podra cargar el valor correspondiente al volumen de corte.\r\n");
1a0006da:	4921      	ldr	r1, [pc, #132]	; (1a000760 <muestraPantalla+0x178>)
1a0006dc:	2003      	movs	r0, #3
1a0006de:	f001 f820 	bl	1a001722 <uartWriteString>
			uartWriteString(UART_USB, "Presione 4 para finalizar y regresar al menu anterior.\r\n\n");
1a0006e2:	491e      	ldr	r1, [pc, #120]	; (1a00075c <muestraPantalla+0x174>)
1a0006e4:	2003      	movs	r0, #3
1a0006e6:	f001 f81c 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a0006ea:	4b11      	ldr	r3, [pc, #68]	; (1a000730 <muestraPantalla+0x148>)
1a0006ec:	601c      	str	r4, [r3, #0]
1a0006ee:	e78b      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a0006f0:	4b0f      	ldr	r3, [pc, #60]	; (1a000730 <muestraPantalla+0x148>)
1a0006f2:	681b      	ldr	r3, [r3, #0]
1a0006f4:	4283      	cmp	r3, r0
1a0006f6:	d087      	beq.n	1a000608 <muestraPantalla+0x20>
		    uartWriteString(UART_USB, "Limpiando la bomba...\r\n");
1a0006f8:	491a      	ldr	r1, [pc, #104]	; (1a000764 <muestraPantalla+0x17c>)
1a0006fa:	2003      	movs	r0, #3
1a0006fc:	f001 f811 	bl	1a001722 <uartWriteString>
			uartWriteString(UART_USB, "Presione 4 para finalizar y regresar al menu anterior.\r\n\n");
1a000700:	4916      	ldr	r1, [pc, #88]	; (1a00075c <muestraPantalla+0x174>)
1a000702:	2003      	movs	r0, #3
1a000704:	f001 f80d 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a000708:	4b09      	ldr	r3, [pc, #36]	; (1a000730 <muestraPantalla+0x148>)
1a00070a:	601c      	str	r4, [r3, #0]
1a00070c:	e77c      	b.n	1a000608 <muestraPantalla+0x20>
	     if(pantalla != pantallaPrevia){
1a00070e:	4b08      	ldr	r3, [pc, #32]	; (1a000730 <muestraPantalla+0x148>)
1a000710:	681b      	ldr	r3, [r3, #0]
1a000712:	4283      	cmp	r3, r0
1a000714:	f43f af78 	beq.w	1a000608 <muestraPantalla+0x20>
		    uartWriteString(UART_USB, "En esta pantalla se mostraran los datos para conectarse al dispositivo mediante una red wifi.\r\n");
1a000718:	4913      	ldr	r1, [pc, #76]	; (1a000768 <muestraPantalla+0x180>)
1a00071a:	2003      	movs	r0, #3
1a00071c:	f001 f801 	bl	1a001722 <uartWriteString>
		    uartWriteString(UART_USB, "Presione 4 para finalizar y regresar al menu anterior.\r\n\n");
1a000720:	490e      	ldr	r1, [pc, #56]	; (1a00075c <muestraPantalla+0x174>)
1a000722:	2003      	movs	r0, #3
1a000724:	f000 fffd 	bl	1a001722 <uartWriteString>
			pantallaPrevia = pantalla;
1a000728:	4b01      	ldr	r3, [pc, #4]	; (1a000730 <muestraPantalla+0x148>)
1a00072a:	601c      	str	r4, [r3, #0]
}
1a00072c:	e76c      	b.n	1a000608 <muestraPantalla+0x20>
1a00072e:	bf00      	nop
1a000730:	10000000 	.word	0x10000000
1a000734:	1a00218c 	.word	0x1a00218c
1a000738:	1a0021d0 	.word	0x1a0021d0
1a00073c:	1a002210 	.word	0x1a002210
1a000740:	1a002254 	.word	0x1a002254
1a000744:	1a002288 	.word	0x1a002288
1a000748:	1a0022c0 	.word	0x1a0022c0
1a00074c:	1a0022f8 	.word	0x1a0022f8
1a000750:	1a002330 	.word	0x1a002330
1a000754:	1a00238c 	.word	0x1a00238c
1a000758:	1a0023f4 	.word	0x1a0023f4
1a00075c:	1a002478 	.word	0x1a002478
1a000760:	1a0024b4 	.word	0x1a0024b4
1a000764:	1a002508 	.word	0x1a002508
1a000768:	1a002520 	.word	0x1a002520

1a00076c <main>:
int pulsador=0, ultimoBoton = 0; //variable para guardar el ultimo pulsador que permite el cambio de estado

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a00076c:	b500      	push	{lr}
1a00076e:	b08d      	sub	sp, #52	; 0x34
// ----- Configuración -----------------------------------
   delay_t mefMenu;
   delay_t mefPulsadores;
   delayInit( &mefMenu, TIEMPO_MEF_MENU );
1a000770:	2264      	movs	r2, #100	; 0x64
1a000772:	2300      	movs	r3, #0
1a000774:	a806      	add	r0, sp, #24
1a000776:	f001 fae3 	bl	1a001d40 <delayInit>
   delayInit( &mefPulsadores, TIEMPO_MEF_PULSADOR );
1a00077a:	2264      	movs	r2, #100	; 0x64
1a00077c:	2300      	movs	r3, #0
1a00077e:	4668      	mov	r0, sp
1a000780:	f001 fade 	bl	1a001d40 <delayInit>
   boardInit();
1a000784:	f001 f9a6 	bl	1a001ad4 <boardInit>
   iniciarMEF();
1a000788:	f7ff fdc0 	bl	1a00030c <iniciarMEF>
   iniciarPantalla();
1a00078c:	f7ff ff24 	bl	1a0005d8 <iniciarPantalla>
   iniciarTeclas();
1a000790:	f7ff fe86 	bl	1a0004a0 <iniciarTeclas>
// ----- Bucle infinito-------------------------
   while( true ) {
   //---Se actualiza MEF del menu cada 100 mS
      if( delayRead(&mefMenu)){
1a000794:	a806      	add	r0, sp, #24
1a000796:	f001 fae3 	bl	1a001d60 <delayRead>
1a00079a:	b968      	cbnz	r0, 1a0007b8 <main+0x4c>
      actualizarMEF(ultimoBoton);
      ultimoBoton = 0;
      }
   //---Se actualiza la MEF de los botones cada 50 mS
      if( delayRead(&mefPulsadores) ) {
1a00079c:	4668      	mov	r0, sp
1a00079e:	f001 fadf 	bl	1a001d60 <delayRead>
1a0007a2:	b980      	cbnz	r0, 1a0007c6 <main+0x5a>
      actualizarTeclas();
      pulsador = consultarTeclas();
      }
      else{
         pulsador = 0;
1a0007a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0007d4 <main+0x68>)
1a0007a6:	2200      	movs	r2, #0
1a0007a8:	601a      	str	r2, [r3, #0]
      }
      if (pulsador != 0){
1a0007aa:	4b0a      	ldr	r3, [pc, #40]	; (1a0007d4 <main+0x68>)
1a0007ac:	681b      	ldr	r3, [r3, #0]
1a0007ae:	2b00      	cmp	r3, #0
1a0007b0:	d0f0      	beq.n	1a000794 <main+0x28>
         ultimoBoton = pulsador;
1a0007b2:	4a09      	ldr	r2, [pc, #36]	; (1a0007d8 <main+0x6c>)
1a0007b4:	6013      	str	r3, [r2, #0]
1a0007b6:	e7ed      	b.n	1a000794 <main+0x28>
      actualizarMEF(ultimoBoton);
1a0007b8:	4c07      	ldr	r4, [pc, #28]	; (1a0007d8 <main+0x6c>)
1a0007ba:	6820      	ldr	r0, [r4, #0]
1a0007bc:	f7ff fdac 	bl	1a000318 <actualizarMEF>
      ultimoBoton = 0;
1a0007c0:	2300      	movs	r3, #0
1a0007c2:	6023      	str	r3, [r4, #0]
1a0007c4:	e7ea      	b.n	1a00079c <main+0x30>
      actualizarTeclas();
1a0007c6:	f7ff febd 	bl	1a000544 <actualizarTeclas>
      pulsador = consultarTeclas();
1a0007ca:	f7ff fed1 	bl	1a000570 <consultarTeclas>
1a0007ce:	4b01      	ldr	r3, [pc, #4]	; (1a0007d4 <main+0x68>)
1a0007d0:	6018      	str	r0, [r3, #0]
1a0007d2:	e7ea      	b.n	1a0007aa <main+0x3e>
1a0007d4:	10000048 	.word	0x10000048
1a0007d8:	1000004c 	.word	0x1000004c

1a0007dc <prenderLed>:
 *      Author: fernando
 */
#include "led.h"

void prenderLed(char letra)
{
1a0007dc:	b508      	push	{r3, lr}
   switch(letra){
1a0007de:	3861      	subs	r0, #97	; 0x61
1a0007e0:	2815      	cmp	r0, #21
1a0007e2:	d810      	bhi.n	1a000806 <prenderLed+0x2a>
1a0007e4:	e8df f000 	tbb	[pc, r0]
1a0007e8:	0f0f0f10 	.word	0x0f0f0f10
1a0007ec:	0f0f0f0f 	.word	0x0f0f0f0f
1a0007f0:	0f0f0f0f 	.word	0x0f0f0f0f
1a0007f4:	0f0f0f0f 	.word	0x0f0f0f0f
1a0007f8:	1a0f0b0f 	.word	0x1a0f0b0f
1a0007fc:	150f      	.short	0x150f
      case 'r':;
         gpioWrite(LED2,1);
1a0007fe:	2101      	movs	r1, #1
1a000800:	202c      	movs	r0, #44	; 0x2c
1a000802:	f001 f8ef 	bl	1a0019e4 <gpioWrite>
         gpioWrite(LED3,1);
         break;
      default:
    	  break;
   }
}
1a000806:	bd08      	pop	{r3, pc}
         gpioWrite(LED1,1);
1a000808:	2101      	movs	r1, #1
1a00080a:	202b      	movs	r0, #43	; 0x2b
1a00080c:	f001 f8ea 	bl	1a0019e4 <gpioWrite>
         break;
1a000810:	e7f9      	b.n	1a000806 <prenderLed+0x2a>
         gpioWrite(LED3,1);
1a000812:	2101      	movs	r1, #1
1a000814:	202d      	movs	r0, #45	; 0x2d
1a000816:	f001 f8e5 	bl	1a0019e4 <gpioWrite>
         break;
1a00081a:	e7f4      	b.n	1a000806 <prenderLed+0x2a>
         gpioWrite(LED1,1);
1a00081c:	2101      	movs	r1, #1
1a00081e:	202b      	movs	r0, #43	; 0x2b
1a000820:	f001 f8e0 	bl	1a0019e4 <gpioWrite>
         gpioWrite(LED2,1);
1a000824:	2101      	movs	r1, #1
1a000826:	202c      	movs	r0, #44	; 0x2c
1a000828:	f001 f8dc 	bl	1a0019e4 <gpioWrite>
         gpioWrite(LED3,1);
1a00082c:	2101      	movs	r1, #1
1a00082e:	202d      	movs	r0, #45	; 0x2d
1a000830:	f001 f8d8 	bl	1a0019e4 <gpioWrite>
}
1a000834:	e7e7      	b.n	1a000806 <prenderLed+0x2a>

1a000836 <apagarLed>:

void apagarLed(char letra)
{
1a000836:	b508      	push	{r3, lr}
   switch(letra){
1a000838:	3861      	subs	r0, #97	; 0x61
1a00083a:	2815      	cmp	r0, #21
1a00083c:	d810      	bhi.n	1a000860 <apagarLed+0x2a>
1a00083e:	e8df f000 	tbb	[pc, r0]
1a000842:	0f10      	.short	0x0f10
1a000844:	0f0f0f0f 	.word	0x0f0f0f0f
1a000848:	0f0f0f0f 	.word	0x0f0f0f0f
1a00084c:	0f0f0f0f 	.word	0x0f0f0f0f
1a000850:	0b0f0f0f 	.word	0x0b0f0f0f
1a000854:	150f1a0f 	.word	0x150f1a0f
      case 'r':;
         gpioWrite(LED2,0);
1a000858:	2100      	movs	r1, #0
1a00085a:	202c      	movs	r0, #44	; 0x2c
1a00085c:	f001 f8c2 	bl	1a0019e4 <gpioWrite>
         gpioWrite(LED3,0);
         break;
      default:
    	  break;
   }
}
1a000860:	bd08      	pop	{r3, pc}
         gpioWrite(LED1,0);
1a000862:	2100      	movs	r1, #0
1a000864:	202b      	movs	r0, #43	; 0x2b
1a000866:	f001 f8bd 	bl	1a0019e4 <gpioWrite>
         break;
1a00086a:	e7f9      	b.n	1a000860 <apagarLed+0x2a>
         gpioWrite(LED3,0);
1a00086c:	2100      	movs	r1, #0
1a00086e:	202d      	movs	r0, #45	; 0x2d
1a000870:	f001 f8b8 	bl	1a0019e4 <gpioWrite>
         break;
1a000874:	e7f4      	b.n	1a000860 <apagarLed+0x2a>
         gpioWrite(LED1,0);
1a000876:	2100      	movs	r1, #0
1a000878:	202b      	movs	r0, #43	; 0x2b
1a00087a:	f001 f8b3 	bl	1a0019e4 <gpioWrite>
         gpioWrite(LED2,0);
1a00087e:	2100      	movs	r1, #0
1a000880:	202c      	movs	r0, #44	; 0x2c
1a000882:	f001 f8af 	bl	1a0019e4 <gpioWrite>
         gpioWrite(LED3,0);
1a000886:	2100      	movs	r1, #0
1a000888:	202d      	movs	r0, #45	; 0x2d
1a00088a:	f001 f8ab 	bl	1a0019e4 <gpioWrite>
}
1a00088e:	e7e7      	b.n	1a000860 <apagarLed+0x2a>

1a000890 <initialise_monitor_handles>:
}
1a000890:	4770      	bx	lr
1a000892:	Address 0x000000001a000892 is out of bounds.


1a000894 <Reset_Handler>:
void Reset_Handler(void) {
1a000894:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000896:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000898:	4b19      	ldr	r3, [pc, #100]	; (1a000900 <Reset_Handler+0x6c>)
1a00089a:	4a1a      	ldr	r2, [pc, #104]	; (1a000904 <Reset_Handler+0x70>)
1a00089c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00089e:	3304      	adds	r3, #4
1a0008a0:	4a19      	ldr	r2, [pc, #100]	; (1a000908 <Reset_Handler+0x74>)
1a0008a2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008a4:	2300      	movs	r3, #0
1a0008a6:	e005      	b.n	1a0008b4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0008a8:	4a18      	ldr	r2, [pc, #96]	; (1a00090c <Reset_Handler+0x78>)
1a0008aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0008ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008b2:	3301      	adds	r3, #1
1a0008b4:	2b07      	cmp	r3, #7
1a0008b6:	d9f7      	bls.n	1a0008a8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0008b8:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0008ba:	4b15      	ldr	r3, [pc, #84]	; (1a000910 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0008bc:	e007      	b.n	1a0008ce <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0008be:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0008c2:	689a      	ldr	r2, [r3, #8]
1a0008c4:	6859      	ldr	r1, [r3, #4]
1a0008c6:	6818      	ldr	r0, [r3, #0]
1a0008c8:	f7ff fc5f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0008cc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0008ce:	4a11      	ldr	r2, [pc, #68]	; (1a000914 <Reset_Handler+0x80>)
1a0008d0:	4293      	cmp	r3, r2
1a0008d2:	d3f4      	bcc.n	1a0008be <Reset_Handler+0x2a>
1a0008d4:	e006      	b.n	1a0008e4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0008d6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0008d8:	6859      	ldr	r1, [r3, #4]
1a0008da:	f854 0b08 	ldr.w	r0, [r4], #8
1a0008de:	f7ff fc63 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0008e2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0008e4:	4a0c      	ldr	r2, [pc, #48]	; (1a000918 <Reset_Handler+0x84>)
1a0008e6:	4293      	cmp	r3, r2
1a0008e8:	d3f5      	bcc.n	1a0008d6 <Reset_Handler+0x42>
    SystemInit();
1a0008ea:	f000 fe8f 	bl	1a00160c <SystemInit>
    __libc_init_array();
1a0008ee:	f001 fbd9 	bl	1a0020a4 <__libc_init_array>
    initialise_monitor_handles();
1a0008f2:	f7ff ffcd 	bl	1a000890 <initialise_monitor_handles>
    main();
1a0008f6:	f7ff ff39 	bl	1a00076c <main>
        __asm__ volatile("wfi");
1a0008fa:	bf30      	wfi
1a0008fc:	e7fd      	b.n	1a0008fa <Reset_Handler+0x66>
1a0008fe:	bf00      	nop
1a000900:	40053100 	.word	0x40053100
1a000904:	10df1000 	.word	0x10df1000
1a000908:	01dff7ff 	.word	0x01dff7ff
1a00090c:	e000e280 	.word	0xe000e280
1a000910:	1a000114 	.word	0x1a000114
1a000914:	1a000150 	.word	0x1a000150
1a000918:	1a000178 	.word	0x1a000178

1a00091c <_fini>:
void _fini(void) {}
1a00091c:	4770      	bx	lr

1a00091e <_init>:
void _init(void) {}
1a00091e:	4770      	bx	lr

1a000920 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000920:	2200      	movs	r2, #0
1a000922:	2a05      	cmp	r2, #5
1a000924:	d819      	bhi.n	1a00095a <Board_LED_Init+0x3a>
{
1a000926:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000928:	490c      	ldr	r1, [pc, #48]	; (1a00095c <Board_LED_Init+0x3c>)
1a00092a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00092e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000932:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000934:	4b0a      	ldr	r3, [pc, #40]	; (1a000960 <Board_LED_Init+0x40>)
1a000936:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00093a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00093e:	2001      	movs	r0, #1
1a000940:	40a0      	lsls	r0, r4
1a000942:	4301      	orrs	r1, r0
1a000944:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000948:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a00094c:	2100      	movs	r1, #0
1a00094e:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000950:	3201      	adds	r2, #1
1a000952:	2a05      	cmp	r2, #5
1a000954:	d9e8      	bls.n	1a000928 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000956:	bc70      	pop	{r4, r5, r6}
1a000958:	4770      	bx	lr
1a00095a:	4770      	bx	lr
1a00095c:	1a00258c 	.word	0x1a00258c
1a000960:	400f4000 	.word	0x400f4000

1a000964 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000964:	2300      	movs	r3, #0
1a000966:	2b03      	cmp	r3, #3
1a000968:	d816      	bhi.n	1a000998 <Board_TEC_Init+0x34>
{
1a00096a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00096c:	490b      	ldr	r1, [pc, #44]	; (1a00099c <Board_TEC_Init+0x38>)
1a00096e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000972:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000976:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000978:	4c09      	ldr	r4, [pc, #36]	; (1a0009a0 <Board_TEC_Init+0x3c>)
1a00097a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00097e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000982:	2001      	movs	r0, #1
1a000984:	40a8      	lsls	r0, r5
1a000986:	ea21 0100 	bic.w	r1, r1, r0
1a00098a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00098e:	3301      	adds	r3, #1
1a000990:	2b03      	cmp	r3, #3
1a000992:	d9eb      	bls.n	1a00096c <Board_TEC_Init+0x8>
   }
}
1a000994:	bc30      	pop	{r4, r5}
1a000996:	4770      	bx	lr
1a000998:	4770      	bx	lr
1a00099a:	bf00      	nop
1a00099c:	1a002584 	.word	0x1a002584
1a0009a0:	400f4000 	.word	0x400f4000

1a0009a4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009a4:	2300      	movs	r3, #0
1a0009a6:	2b08      	cmp	r3, #8
1a0009a8:	d816      	bhi.n	1a0009d8 <Board_GPIO_Init+0x34>
{
1a0009aa:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009ac:	490b      	ldr	r1, [pc, #44]	; (1a0009dc <Board_GPIO_Init+0x38>)
1a0009ae:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009b2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009b6:	784d      	ldrb	r5, [r1, #1]
1a0009b8:	4c09      	ldr	r4, [pc, #36]	; (1a0009e0 <Board_GPIO_Init+0x3c>)
1a0009ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009be:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009c2:	2001      	movs	r0, #1
1a0009c4:	40a8      	lsls	r0, r5
1a0009c6:	ea21 0100 	bic.w	r1, r1, r0
1a0009ca:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009ce:	3301      	adds	r3, #1
1a0009d0:	2b08      	cmp	r3, #8
1a0009d2:	d9eb      	bls.n	1a0009ac <Board_GPIO_Init+0x8>
   }
}
1a0009d4:	bc30      	pop	{r4, r5}
1a0009d6:	4770      	bx	lr
1a0009d8:	4770      	bx	lr
1a0009da:	bf00      	nop
1a0009dc:	1a002598 	.word	0x1a002598
1a0009e0:	400f4000 	.word	0x400f4000

1a0009e4 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0009e4:	b510      	push	{r4, lr}
1a0009e6:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0009e8:	4c08      	ldr	r4, [pc, #32]	; (1a000a0c <Board_ADC_Init+0x28>)
1a0009ea:	4669      	mov	r1, sp
1a0009ec:	4620      	mov	r0, r4
1a0009ee:	f000 f9f5 	bl	1a000ddc <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0009f2:	4a07      	ldr	r2, [pc, #28]	; (1a000a10 <Board_ADC_Init+0x2c>)
1a0009f4:	4669      	mov	r1, sp
1a0009f6:	4620      	mov	r0, r4
1a0009f8:	f000 fa10 	bl	1a000e1c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0009fc:	2200      	movs	r2, #0
1a0009fe:	4669      	mov	r1, sp
1a000a00:	4620      	mov	r0, r4
1a000a02:	f000 fa24 	bl	1a000e4e <Chip_ADC_SetResolution>
}
1a000a06:	b002      	add	sp, #8
1a000a08:	bd10      	pop	{r4, pc}
1a000a0a:	bf00      	nop
1a000a0c:	400e3000 	.word	0x400e3000
1a000a10:	00061a80 	.word	0x00061a80

1a000a14 <Board_SPI_Init>:
{
1a000a14:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000a16:	4c0b      	ldr	r4, [pc, #44]	; (1a000a44 <Board_SPI_Init+0x30>)
1a000a18:	4620      	mov	r0, r4
1a000a1a:	f000 fddb 	bl	1a0015d4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000a1e:	6863      	ldr	r3, [r4, #4]
1a000a20:	f023 0304 	bic.w	r3, r3, #4
1a000a24:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000a26:	6823      	ldr	r3, [r4, #0]
1a000a28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000a2c:	f043 0307 	orr.w	r3, r3, #7
1a000a30:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000a32:	4905      	ldr	r1, [pc, #20]	; (1a000a48 <Board_SPI_Init+0x34>)
1a000a34:	4620      	mov	r0, r4
1a000a36:	f000 fdae 	bl	1a001596 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000a3a:	6863      	ldr	r3, [r4, #4]
1a000a3c:	f043 0302 	orr.w	r3, r3, #2
1a000a40:	6063      	str	r3, [r4, #4]
}
1a000a42:	bd10      	pop	{r4, pc}
1a000a44:	400c5000 	.word	0x400c5000
1a000a48:	000186a0 	.word	0x000186a0

1a000a4c <Board_I2C_Init>:
{
1a000a4c:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000a4e:	2000      	movs	r0, #0
1a000a50:	f000 f8a4 	bl	1a000b9c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000a54:	4b04      	ldr	r3, [pc, #16]	; (1a000a68 <Board_I2C_Init+0x1c>)
1a000a56:	f640 0208 	movw	r2, #2056	; 0x808
1a000a5a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000a5e:	4903      	ldr	r1, [pc, #12]	; (1a000a6c <Board_I2C_Init+0x20>)
1a000a60:	2000      	movs	r0, #0
1a000a62:	f000 f8ad 	bl	1a000bc0 <Chip_I2C_SetClockRate>
}
1a000a66:	bd08      	pop	{r3, pc}
1a000a68:	40086000 	.word	0x40086000
1a000a6c:	000f4240 	.word	0x000f4240

1a000a70 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000a70:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000a72:	4c07      	ldr	r4, [pc, #28]	; (1a000a90 <Board_Debug_Init+0x20>)
1a000a74:	4620      	mov	r0, r4
1a000a76:	f000 f8d5 	bl	1a000c24 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000a7a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000a7e:	4620      	mov	r0, r4
1a000a80:	f000 f91a 	bl	1a000cb8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000a84:	2303      	movs	r3, #3
1a000a86:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000a88:	2301      	movs	r3, #1
1a000a8a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000a8c:	bd10      	pop	{r4, pc}
1a000a8e:	bf00      	nop
1a000a90:	400c1000 	.word	0x400c1000

1a000a94 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000a94:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000a96:	f7ff ffeb 	bl	1a000a70 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000a9a:	4809      	ldr	r0, [pc, #36]	; (1a000ac0 <Board_Init+0x2c>)
1a000a9c:	f000 fcae 	bl	1a0013fc <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000aa0:	f7ff ff80 	bl	1a0009a4 <Board_GPIO_Init>
   Board_ADC_Init();
1a000aa4:	f7ff ff9e 	bl	1a0009e4 <Board_ADC_Init>
   Board_SPI_Init();
1a000aa8:	f7ff ffb4 	bl	1a000a14 <Board_SPI_Init>
   Board_I2C_Init();
1a000aac:	f7ff ffce 	bl	1a000a4c <Board_I2C_Init>

   Board_LED_Init();
1a000ab0:	f7ff ff36 	bl	1a000920 <Board_LED_Init>
   Board_TEC_Init();
1a000ab4:	f7ff ff56 	bl	1a000964 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000ab8:	f000 f9d0 	bl	1a000e5c <SystemCoreClockUpdate>
}
1a000abc:	bd08      	pop	{r3, pc}
1a000abe:	bf00      	nop
1a000ac0:	400f4000 	.word	0x400f4000

1a000ac4 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000ac4:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000ac6:	f7ff ffd3 	bl	1a000a70 <Board_Debug_Init>
1a000aca:	bd08      	pop	{r3, pc}

1a000acc <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000acc:	2300      	movs	r3, #0
1a000ace:	2b1c      	cmp	r3, #28
1a000ad0:	d812      	bhi.n	1a000af8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000ad2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000ad4:	4a09      	ldr	r2, [pc, #36]	; (1a000afc <Board_SetupMuxing+0x30>)
1a000ad6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000ada:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000ade:	784a      	ldrb	r2, [r1, #1]
1a000ae0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000ae2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000ae6:	4906      	ldr	r1, [pc, #24]	; (1a000b00 <Board_SetupMuxing+0x34>)
1a000ae8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000aec:	3301      	adds	r3, #1
1a000aee:	2b1c      	cmp	r3, #28
1a000af0:	d9f0      	bls.n	1a000ad4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000af2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000af6:	4770      	bx	lr
1a000af8:	4770      	bx	lr
1a000afa:	bf00      	nop
1a000afc:	1a0025b4 	.word	0x1a0025b4
1a000b00:	40086000 	.word	0x40086000

1a000b04 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b04:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000b06:	4a17      	ldr	r2, [pc, #92]	; (1a000b64 <Board_SetupClocking+0x60>)
1a000b08:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b10:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b14:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b18:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b20:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b24:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b28:	2201      	movs	r2, #1
1a000b2a:	490f      	ldr	r1, [pc, #60]	; (1a000b68 <Board_SetupClocking+0x64>)
1a000b2c:	2006      	movs	r0, #6
1a000b2e:	f000 fc67 	bl	1a001400 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b32:	2400      	movs	r4, #0
1a000b34:	b14c      	cbz	r4, 1a000b4a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b36:	4b0b      	ldr	r3, [pc, #44]	; (1a000b64 <Board_SetupClocking+0x60>)
1a000b38:	685a      	ldr	r2, [r3, #4]
1a000b3a:	f022 020c 	bic.w	r2, r2, #12
1a000b3e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b40:	685a      	ldr	r2, [r3, #4]
1a000b42:	f042 0203 	orr.w	r2, r2, #3
1a000b46:	605a      	str	r2, [r3, #4]
}
1a000b48:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000b4a:	4808      	ldr	r0, [pc, #32]	; (1a000b6c <Board_SetupClocking+0x68>)
1a000b4c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b50:	2301      	movs	r3, #1
1a000b52:	788a      	ldrb	r2, [r1, #2]
1a000b54:	7849      	ldrb	r1, [r1, #1]
1a000b56:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b5a:	f000 fbab 	bl	1a0012b4 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b5e:	3401      	adds	r4, #1
1a000b60:	e7e8      	b.n	1a000b34 <Board_SetupClocking+0x30>
1a000b62:	bf00      	nop
1a000b64:	40043000 	.word	0x40043000
1a000b68:	0c28cb00 	.word	0x0c28cb00
1a000b6c:	1a0025b0 	.word	0x1a0025b0

1a000b70 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000b70:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000b72:	f7ff ffab 	bl	1a000acc <Board_SetupMuxing>
    Board_SetupClocking();
1a000b76:	f7ff ffc5 	bl	1a000b04 <Board_SetupClocking>
}
1a000b7a:	bd08      	pop	{r3, pc}

1a000b7c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000b7c:	2901      	cmp	r1, #1
1a000b7e:	d109      	bne.n	1a000b94 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000b80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000b84:	0082      	lsls	r2, r0, #2
1a000b86:	4b04      	ldr	r3, [pc, #16]	; (1a000b98 <Chip_I2C_EventHandler+0x1c>)
1a000b88:	4413      	add	r3, r2
1a000b8a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000b8c:	7d13      	ldrb	r3, [r2, #20]
1a000b8e:	b2db      	uxtb	r3, r3
1a000b90:	2b04      	cmp	r3, #4
1a000b92:	d0fb      	beq.n	1a000b8c <Chip_I2C_EventHandler+0x10>
}
1a000b94:	4770      	bx	lr
1a000b96:	bf00      	nop
1a000b98:	10000004 	.word	0x10000004

1a000b9c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000b9c:	b570      	push	{r4, r5, r6, lr}
1a000b9e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000ba0:	4e06      	ldr	r6, [pc, #24]	; (1a000bbc <Chip_I2C_Init+0x20>)
1a000ba2:	00c4      	lsls	r4, r0, #3
1a000ba4:	1a22      	subs	r2, r4, r0
1a000ba6:	0093      	lsls	r3, r2, #2
1a000ba8:	4433      	add	r3, r6
1a000baa:	8898      	ldrh	r0, [r3, #4]
1a000bac:	f000 fbe6 	bl	1a00137c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000bb0:	1b64      	subs	r4, r4, r5
1a000bb2:	00a3      	lsls	r3, r4, #2
1a000bb4:	58f3      	ldr	r3, [r6, r3]
1a000bb6:	226c      	movs	r2, #108	; 0x6c
1a000bb8:	619a      	str	r2, [r3, #24]
}
1a000bba:	bd70      	pop	{r4, r5, r6, pc}
1a000bbc:	10000004 	.word	0x10000004

1a000bc0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000bc4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000bc6:	4e0b      	ldr	r6, [pc, #44]	; (1a000bf4 <Chip_I2C_SetClockRate+0x34>)
1a000bc8:	00c5      	lsls	r5, r0, #3
1a000bca:	1a2b      	subs	r3, r5, r0
1a000bcc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000bd0:	eb06 0308 	add.w	r3, r6, r8
1a000bd4:	8898      	ldrh	r0, [r3, #4]
1a000bd6:	f000 fbeb 	bl	1a0013b0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000bda:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000bde:	f856 3008 	ldr.w	r3, [r6, r8]
1a000be2:	0842      	lsrs	r2, r0, #1
1a000be4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000be6:	f856 3008 	ldr.w	r3, [r6, r8]
1a000bea:	691a      	ldr	r2, [r3, #16]
1a000bec:	1a80      	subs	r0, r0, r2
1a000bee:	6158      	str	r0, [r3, #20]
}
1a000bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000bf4:	10000004 	.word	0x10000004

1a000bf8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000bf8:	4b09      	ldr	r3, [pc, #36]	; (1a000c20 <Chip_UART_GetIndex+0x28>)
1a000bfa:	4298      	cmp	r0, r3
1a000bfc:	d009      	beq.n	1a000c12 <Chip_UART_GetIndex+0x1a>
1a000bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000c02:	4298      	cmp	r0, r3
1a000c04:	d007      	beq.n	1a000c16 <Chip_UART_GetIndex+0x1e>
1a000c06:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000c0a:	4298      	cmp	r0, r3
1a000c0c:	d005      	beq.n	1a000c1a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000c0e:	2000      	movs	r0, #0
1a000c10:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000c12:	2002      	movs	r0, #2
1a000c14:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000c16:	2003      	movs	r0, #3
1a000c18:	4770      	bx	lr
			return 1;
1a000c1a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000c1c:	4770      	bx	lr
1a000c1e:	bf00      	nop
1a000c20:	400c1000 	.word	0x400c1000

1a000c24 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000c24:	b530      	push	{r4, r5, lr}
1a000c26:	b083      	sub	sp, #12
1a000c28:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000c2a:	f7ff ffe5 	bl	1a000bf8 <Chip_UART_GetIndex>
1a000c2e:	2301      	movs	r3, #1
1a000c30:	461a      	mov	r2, r3
1a000c32:	4619      	mov	r1, r3
1a000c34:	4d0e      	ldr	r5, [pc, #56]	; (1a000c70 <Chip_UART_Init+0x4c>)
1a000c36:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000c3a:	f000 fb81 	bl	1a001340 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000c3e:	2307      	movs	r3, #7
1a000c40:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000c42:	2300      	movs	r3, #0
1a000c44:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000c46:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000c48:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000c4a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000c4c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000c4e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000c50:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000c52:	4b08      	ldr	r3, [pc, #32]	; (1a000c74 <Chip_UART_Init+0x50>)
1a000c54:	429c      	cmp	r4, r3
1a000c56:	d006      	beq.n	1a000c66 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000c58:	2303      	movs	r3, #3
1a000c5a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000c5c:	2310      	movs	r3, #16
1a000c5e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000c60:	9b01      	ldr	r3, [sp, #4]
}
1a000c62:	b003      	add	sp, #12
1a000c64:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000c66:	2300      	movs	r3, #0
1a000c68:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000c6a:	69a3      	ldr	r3, [r4, #24]
1a000c6c:	9301      	str	r3, [sp, #4]
1a000c6e:	e7f3      	b.n	1a000c58 <Chip_UART_Init+0x34>
1a000c70:	1a002630 	.word	0x1a002630
1a000c74:	40082000 	.word	0x40082000

1a000c78 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000c78:	b538      	push	{r3, r4, r5, lr}
1a000c7a:	4605      	mov	r5, r0
1a000c7c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000c7e:	f7ff ffbb 	bl	1a000bf8 <Chip_UART_GetIndex>
1a000c82:	4b0c      	ldr	r3, [pc, #48]	; (1a000cb4 <Chip_UART_SetBaud+0x3c>)
1a000c84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000c88:	f000 fb92 	bl	1a0013b0 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000c8c:	0123      	lsls	r3, r4, #4
1a000c8e:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a000c92:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000c94:	68ea      	ldr	r2, [r5, #12]
1a000c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000c9a:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000c9c:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a000c9e:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000ca2:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000ca4:	68ea      	ldr	r2, [r5, #12]
1a000ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000caa:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000cac:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000cb0:	0900      	lsrs	r0, r0, #4
1a000cb2:	bd38      	pop	{r3, r4, r5, pc}
1a000cb4:	1a002628 	.word	0x1a002628

1a000cb8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000cbc:	b083      	sub	sp, #12
1a000cbe:	9001      	str	r0, [sp, #4]
1a000cc0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000cc2:	f7ff ff99 	bl	1a000bf8 <Chip_UART_GetIndex>
1a000cc6:	4b32      	ldr	r3, [pc, #200]	; (1a000d90 <Chip_UART_SetBaudFDR+0xd8>)
1a000cc8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000ccc:	f000 fb70 	bl	1a0013b0 <Chip_Clock_GetRate>
1a000cd0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000cd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000cd6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000cd8:	f04f 0b00 	mov.w	fp, #0
1a000cdc:	46a2      	mov	sl, r4
1a000cde:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000ce0:	e02a      	b.n	1a000d38 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000ce2:	4242      	negs	r2, r0
				div ++;
1a000ce4:	1c4b      	adds	r3, r1, #1
1a000ce6:	e017      	b.n	1a000d18 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000ce8:	b30a      	cbz	r2, 1a000d2e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000cea:	4617      	mov	r7, r2
			sd = d;
1a000cec:	46ab      	mov	fp, r5
			sm = m;
1a000cee:	46a2      	mov	sl, r4
			sdiv = div;
1a000cf0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000cf2:	3501      	adds	r5, #1
1a000cf4:	42ac      	cmp	r4, r5
1a000cf6:	d91e      	bls.n	1a000d36 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000cf8:	0933      	lsrs	r3, r6, #4
1a000cfa:	0730      	lsls	r0, r6, #28
1a000cfc:	fba4 0100 	umull	r0, r1, r4, r0
1a000d00:	fb04 1103 	mla	r1, r4, r3, r1
1a000d04:	1962      	adds	r2, r4, r5
1a000d06:	fb08 f202 	mul.w	r2, r8, r2
1a000d0a:	2300      	movs	r3, #0
1a000d0c:	f001 f848 	bl	1a001da0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000d10:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000d12:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000d14:	2800      	cmp	r0, #0
1a000d16:	dbe4      	blt.n	1a000ce2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000d18:	4297      	cmp	r7, r2
1a000d1a:	d3ea      	bcc.n	1a000cf2 <Chip_UART_SetBaudFDR+0x3a>
1a000d1c:	2b00      	cmp	r3, #0
1a000d1e:	d0e8      	beq.n	1a000cf2 <Chip_UART_SetBaudFDR+0x3a>
1a000d20:	0c19      	lsrs	r1, r3, #16
1a000d22:	d1e6      	bne.n	1a000cf2 <Chip_UART_SetBaudFDR+0x3a>
1a000d24:	2b02      	cmp	r3, #2
1a000d26:	d8df      	bhi.n	1a000ce8 <Chip_UART_SetBaudFDR+0x30>
1a000d28:	2d00      	cmp	r5, #0
1a000d2a:	d0dd      	beq.n	1a000ce8 <Chip_UART_SetBaudFDR+0x30>
1a000d2c:	e7e1      	b.n	1a000cf2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000d2e:	4617      	mov	r7, r2
			sd = d;
1a000d30:	46ab      	mov	fp, r5
			sm = m;
1a000d32:	46a2      	mov	sl, r4
			sdiv = div;
1a000d34:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000d36:	3401      	adds	r4, #1
1a000d38:	b11f      	cbz	r7, 1a000d42 <Chip_UART_SetBaudFDR+0x8a>
1a000d3a:	2c0f      	cmp	r4, #15
1a000d3c:	d801      	bhi.n	1a000d42 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000d3e:	2500      	movs	r5, #0
1a000d40:	e7d8      	b.n	1a000cf4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000d42:	f1b9 0f00 	cmp.w	r9, #0
1a000d46:	d01e      	beq.n	1a000d86 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000d48:	9a01      	ldr	r2, [sp, #4]
1a000d4a:	4611      	mov	r1, r2
1a000d4c:	68d3      	ldr	r3, [r2, #12]
1a000d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000d52:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a000d54:	fa5f f389 	uxtb.w	r3, r9
1a000d58:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000d5a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000d5e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000d60:	68d3      	ldr	r3, [r2, #12]
1a000d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000d66:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000d68:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000d6c:	b2db      	uxtb	r3, r3
1a000d6e:	f00b 020f 	and.w	r2, fp, #15
1a000d72:	4313      	orrs	r3, r2
1a000d74:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000d76:	0933      	lsrs	r3, r6, #4
1a000d78:	fb0a f303 	mul.w	r3, sl, r3
1a000d7c:	44da      	add	sl, fp
1a000d7e:	fb09 f90a 	mul.w	r9, r9, sl
1a000d82:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000d86:	4648      	mov	r0, r9
1a000d88:	b003      	add	sp, #12
1a000d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000d8e:	bf00      	nop
1a000d90:	1a002628 	.word	0x1a002628

1a000d94 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000d94:	4b03      	ldr	r3, [pc, #12]	; (1a000da4 <Chip_ADC_GetClockIndex+0x10>)
1a000d96:	4298      	cmp	r0, r3
1a000d98:	d001      	beq.n	1a000d9e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000d9a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000d9c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000d9e:	2004      	movs	r0, #4
1a000da0:	4770      	bx	lr
1a000da2:	bf00      	nop
1a000da4:	400e4000 	.word	0x400e4000

1a000da8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000da8:	b570      	push	{r4, r5, r6, lr}
1a000daa:	460d      	mov	r5, r1
1a000dac:	4614      	mov	r4, r2
1a000dae:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000db0:	f7ff fff0 	bl	1a000d94 <Chip_ADC_GetClockIndex>
1a000db4:	f000 fafc 	bl	1a0013b0 <Chip_Clock_GetRate>
	if (burstMode) {
1a000db8:	b155      	cbz	r5, 1a000dd0 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000dba:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000dbe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000dc2:	0064      	lsls	r4, r4, #1
1a000dc4:	fbb0 f0f4 	udiv	r0, r0, r4
1a000dc8:	b2c0      	uxtb	r0, r0
1a000dca:	3801      	subs	r0, #1
	return div;
}
1a000dcc:	b2c0      	uxtb	r0, r0
1a000dce:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000dd0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000dd4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000dd8:	e7f1      	b.n	1a000dbe <getClkDiv+0x16>
1a000dda:	Address 0x000000001a000dda is out of bounds.


1a000ddc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000ddc:	b538      	push	{r3, r4, r5, lr}
1a000dde:	4605      	mov	r5, r0
1a000de0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000de2:	f7ff ffd7 	bl	1a000d94 <Chip_ADC_GetClockIndex>
1a000de6:	2301      	movs	r3, #1
1a000de8:	461a      	mov	r2, r3
1a000dea:	4619      	mov	r1, r3
1a000dec:	f000 faa8 	bl	1a001340 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000df0:	2100      	movs	r1, #0
1a000df2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000df4:	4a08      	ldr	r2, [pc, #32]	; (1a000e18 <Chip_ADC_Init+0x3c>)
1a000df6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000df8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000dfa:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000dfc:	230b      	movs	r3, #11
1a000dfe:	4628      	mov	r0, r5
1a000e00:	f7ff ffd2 	bl	1a000da8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e04:	0200      	lsls	r0, r0, #8
1a000e06:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e0a:	7920      	ldrb	r0, [r4, #4]
1a000e0c:	0440      	lsls	r0, r0, #17
1a000e0e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000e12:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000e14:	6028      	str	r0, [r5, #0]
}
1a000e16:	bd38      	pop	{r3, r4, r5, pc}
1a000e18:	00061a80 	.word	0x00061a80

1a000e1c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000e1c:	b570      	push	{r4, r5, r6, lr}
1a000e1e:	4605      	mov	r5, r0
1a000e20:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000e22:	6804      	ldr	r4, [r0, #0]
1a000e24:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000e28:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000e2c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000e2e:	790b      	ldrb	r3, [r1, #4]
1a000e30:	f1c3 030b 	rsb	r3, r3, #11
1a000e34:	b2db      	uxtb	r3, r3
1a000e36:	7949      	ldrb	r1, [r1, #5]
1a000e38:	f7ff ffb6 	bl	1a000da8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e3c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e40:	7933      	ldrb	r3, [r6, #4]
1a000e42:	045b      	lsls	r3, r3, #17
1a000e44:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000e48:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000e4a:	602b      	str	r3, [r5, #0]
}
1a000e4c:	bd70      	pop	{r4, r5, r6, pc}

1a000e4e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000e4e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000e50:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000e52:	680a      	ldr	r2, [r1, #0]
1a000e54:	f7ff ffe2 	bl	1a000e1c <Chip_ADC_SetSampleRate>
}
1a000e58:	bd08      	pop	{r3, pc}
1a000e5a:	Address 0x000000001a000e5a is out of bounds.


1a000e5c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000e5c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000e5e:	2069      	movs	r0, #105	; 0x69
1a000e60:	f000 faa6 	bl	1a0013b0 <Chip_Clock_GetRate>
1a000e64:	4b01      	ldr	r3, [pc, #4]	; (1a000e6c <SystemCoreClockUpdate+0x10>)
1a000e66:	6018      	str	r0, [r3, #0]
}
1a000e68:	bd08      	pop	{r3, pc}
1a000e6a:	bf00      	nop
1a000e6c:	10000198 	.word	0x10000198

1a000e70 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000e70:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000e72:	680b      	ldr	r3, [r1, #0]
1a000e74:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000e78:	d002      	beq.n	1a000e80 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000e7e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000e80:	4607      	mov	r7, r0
1a000e82:	2501      	movs	r5, #1
1a000e84:	e03a      	b.n	1a000efc <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000e86:	694b      	ldr	r3, [r1, #20]
1a000e88:	fb03 f302 	mul.w	r3, r3, r2
1a000e8c:	fbb3 f3f5 	udiv	r3, r3, r5
1a000e90:	e01c      	b.n	1a000ecc <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000e92:	461c      	mov	r4, r3
	if (val < 0)
1a000e94:	ebb0 0c04 	subs.w	ip, r0, r4
1a000e98:	d427      	bmi.n	1a000eea <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000e9a:	4567      	cmp	r7, ip
1a000e9c:	d906      	bls.n	1a000eac <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000e9e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000ea0:	1c77      	adds	r7, r6, #1
1a000ea2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000ea4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000ea6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000ea8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000eaa:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000eac:	3201      	adds	r2, #1
1a000eae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000eb2:	dc1d      	bgt.n	1a000ef0 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000eb4:	680c      	ldr	r4, [r1, #0]
1a000eb6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000eba:	d0e4      	beq.n	1a000e86 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000ebc:	1c73      	adds	r3, r6, #1
1a000ebe:	fa02 fc03 	lsl.w	ip, r2, r3
1a000ec2:	694b      	ldr	r3, [r1, #20]
1a000ec4:	fb03 f30c 	mul.w	r3, r3, ip
1a000ec8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000ecc:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000f08 <pll_calc_divs+0x98>
1a000ed0:	4563      	cmp	r3, ip
1a000ed2:	d9eb      	bls.n	1a000eac <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000ed4:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000f0c <pll_calc_divs+0x9c>
1a000ed8:	4563      	cmp	r3, ip
1a000eda:	d809      	bhi.n	1a000ef0 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000edc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000ee0:	d1d7      	bne.n	1a000e92 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000ee2:	1c74      	adds	r4, r6, #1
1a000ee4:	fa23 f404 	lsr.w	r4, r3, r4
1a000ee8:	e7d4      	b.n	1a000e94 <pll_calc_divs+0x24>
		return -val;
1a000eea:	f1cc 0c00 	rsb	ip, ip, #0
1a000eee:	e7d4      	b.n	1a000e9a <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000ef0:	3601      	adds	r6, #1
1a000ef2:	2e03      	cmp	r6, #3
1a000ef4:	dc01      	bgt.n	1a000efa <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000ef6:	2201      	movs	r2, #1
1a000ef8:	e7d9      	b.n	1a000eae <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000efa:	3501      	adds	r5, #1
1a000efc:	2d04      	cmp	r5, #4
1a000efe:	dc01      	bgt.n	1a000f04 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000f00:	2600      	movs	r6, #0
1a000f02:	e7f6      	b.n	1a000ef2 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000f04:	bcf0      	pop	{r4, r5, r6, r7}
1a000f06:	4770      	bx	lr
1a000f08:	094c5eff 	.word	0x094c5eff
1a000f0c:	1312d000 	.word	0x1312d000

1a000f10 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000f10:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f12:	b099      	sub	sp, #100	; 0x64
1a000f14:	4605      	mov	r5, r0
1a000f16:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000f18:	225c      	movs	r2, #92	; 0x5c
1a000f1a:	2100      	movs	r1, #0
1a000f1c:	a801      	add	r0, sp, #4
1a000f1e:	f001 f8e5 	bl	1a0020ec <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000f22:	2380      	movs	r3, #128	; 0x80
1a000f24:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000f26:	6963      	ldr	r3, [r4, #20]
1a000f28:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000f2a:	7923      	ldrb	r3, [r4, #4]
1a000f2c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000f30:	4669      	mov	r1, sp
1a000f32:	4628      	mov	r0, r5
1a000f34:	f7ff ff9c 	bl	1a000e70 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000f38:	9b06      	ldr	r3, [sp, #24]
1a000f3a:	42ab      	cmp	r3, r5
1a000f3c:	d027      	beq.n	1a000f8e <pll_get_frac+0x7e>
	if (val < 0)
1a000f3e:	1aeb      	subs	r3, r5, r3
1a000f40:	d42e      	bmi.n	1a000fa0 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000f42:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000f4a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000f4c:	6963      	ldr	r3, [r4, #20]
1a000f4e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000f50:	7923      	ldrb	r3, [r4, #4]
1a000f52:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000f56:	a910      	add	r1, sp, #64	; 0x40
1a000f58:	4628      	mov	r0, r5
1a000f5a:	f7ff ff89 	bl	1a000e70 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000f5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000f60:	42ab      	cmp	r3, r5
1a000f62:	d01f      	beq.n	1a000fa4 <pll_get_frac+0x94>
	if (val < 0)
1a000f64:	1aeb      	subs	r3, r5, r3
1a000f66:	d425      	bmi.n	1a000fb4 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000f68:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000f6a:	4b2b      	ldr	r3, [pc, #172]	; (1a001018 <pll_get_frac+0x108>)
1a000f6c:	429d      	cmp	r5, r3
1a000f6e:	d923      	bls.n	1a000fb8 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000f72:	1aed      	subs	r5, r5, r3
1a000f74:	d433      	bmi.n	1a000fde <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000f76:	42ae      	cmp	r6, r5
1a000f78:	dc3b      	bgt.n	1a000ff2 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000f7a:	42be      	cmp	r6, r7
1a000f7c:	dc31      	bgt.n	1a000fe2 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000f7e:	466d      	mov	r5, sp
1a000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f8c:	e006      	b.n	1a000f9c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000f8e:	466d      	mov	r5, sp
1a000f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000f9c:	b019      	add	sp, #100	; 0x64
1a000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000fa0:	425b      	negs	r3, r3
1a000fa2:	e7ce      	b.n	1a000f42 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000fa4:	ad10      	add	r5, sp, #64	; 0x40
1a000fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000faa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000fb2:	e7f3      	b.n	1a000f9c <pll_get_frac+0x8c>
		return -val;
1a000fb4:	425b      	negs	r3, r3
1a000fb6:	e7d7      	b.n	1a000f68 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000fb8:	2340      	movs	r3, #64	; 0x40
1a000fba:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000fbc:	6963      	ldr	r3, [r4, #20]
1a000fbe:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000fc0:	a908      	add	r1, sp, #32
1a000fc2:	4628      	mov	r0, r5
1a000fc4:	f7ff ff54 	bl	1a000e70 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000fca:	42ab      	cmp	r3, r5
1a000fcc:	d1d0      	bne.n	1a000f70 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000fce:	ad08      	add	r5, sp, #32
1a000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000fdc:	e7de      	b.n	1a000f9c <pll_get_frac+0x8c>
		return -val;
1a000fde:	426d      	negs	r5, r5
1a000fe0:	e7c9      	b.n	1a000f76 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000fe2:	ad10      	add	r5, sp, #64	; 0x40
1a000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fe8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ff0:	e7d4      	b.n	1a000f9c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000ff2:	42af      	cmp	r7, r5
1a000ff4:	db07      	blt.n	1a001006 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000ff6:	ad08      	add	r5, sp, #32
1a000ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ffc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001004:	e7ca      	b.n	1a000f9c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001006:	ad10      	add	r5, sp, #64	; 0x40
1a001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00100c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001014:	e7c2      	b.n	1a000f9c <pll_get_frac+0x8c>
1a001016:	bf00      	nop
1a001018:	068e7780 	.word	0x068e7780

1a00101c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00101c:	b430      	push	{r4, r5}
1a00101e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001020:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001022:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001024:	e000      	b.n	1a001028 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001026:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001028:	281c      	cmp	r0, #28
1a00102a:	d118      	bne.n	1a00105e <Chip_Clock_FindBaseClock+0x42>
1a00102c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001030:	0051      	lsls	r1, r2, #1
1a001032:	4a0c      	ldr	r2, [pc, #48]	; (1a001064 <Chip_Clock_FindBaseClock+0x48>)
1a001034:	440a      	add	r2, r1
1a001036:	7914      	ldrb	r4, [r2, #4]
1a001038:	4284      	cmp	r4, r0
1a00103a:	d010      	beq.n	1a00105e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00103c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001040:	004a      	lsls	r2, r1, #1
1a001042:	4908      	ldr	r1, [pc, #32]	; (1a001064 <Chip_Clock_FindBaseClock+0x48>)
1a001044:	5a8a      	ldrh	r2, [r1, r2]
1a001046:	42aa      	cmp	r2, r5
1a001048:	d8ed      	bhi.n	1a001026 <Chip_Clock_FindBaseClock+0xa>
1a00104a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00104e:	0051      	lsls	r1, r2, #1
1a001050:	4a04      	ldr	r2, [pc, #16]	; (1a001064 <Chip_Clock_FindBaseClock+0x48>)
1a001052:	440a      	add	r2, r1
1a001054:	8852      	ldrh	r2, [r2, #2]
1a001056:	42aa      	cmp	r2, r5
1a001058:	d3e5      	bcc.n	1a001026 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00105a:	4620      	mov	r0, r4
1a00105c:	e7e4      	b.n	1a001028 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00105e:	bc30      	pop	{r4, r5}
1a001060:	4770      	bx	lr
1a001062:	bf00      	nop
1a001064:	1a002644 	.word	0x1a002644

1a001068 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001068:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00106e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001070:	4a0d      	ldr	r2, [pc, #52]	; (1a0010a8 <Chip_Clock_EnableCrystal+0x40>)
1a001072:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001074:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001078:	6992      	ldr	r2, [r2, #24]
1a00107a:	428a      	cmp	r2, r1
1a00107c:	d001      	beq.n	1a001082 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00107e:	4a0a      	ldr	r2, [pc, #40]	; (1a0010a8 <Chip_Clock_EnableCrystal+0x40>)
1a001080:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001082:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001086:	4a09      	ldr	r2, [pc, #36]	; (1a0010ac <Chip_Clock_EnableCrystal+0x44>)
1a001088:	6811      	ldr	r1, [r2, #0]
1a00108a:	4a09      	ldr	r2, [pc, #36]	; (1a0010b0 <Chip_Clock_EnableCrystal+0x48>)
1a00108c:	4291      	cmp	r1, r2
1a00108e:	d901      	bls.n	1a001094 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001090:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001094:	4a04      	ldr	r2, [pc, #16]	; (1a0010a8 <Chip_Clock_EnableCrystal+0x40>)
1a001096:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001098:	9b01      	ldr	r3, [sp, #4]
1a00109a:	1e5a      	subs	r2, r3, #1
1a00109c:	9201      	str	r2, [sp, #4]
1a00109e:	2b00      	cmp	r3, #0
1a0010a0:	d1fa      	bne.n	1a001098 <Chip_Clock_EnableCrystal+0x30>
}
1a0010a2:	b002      	add	sp, #8
1a0010a4:	4770      	bx	lr
1a0010a6:	bf00      	nop
1a0010a8:	40050000 	.word	0x40050000
1a0010ac:	1a0025ac 	.word	0x1a0025ac
1a0010b0:	01312cff 	.word	0x01312cff

1a0010b4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0010b4:	3012      	adds	r0, #18
1a0010b6:	4b05      	ldr	r3, [pc, #20]	; (1a0010cc <Chip_Clock_GetDividerSource+0x18>)
1a0010b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0010bc:	f010 0f01 	tst.w	r0, #1
1a0010c0:	d102      	bne.n	1a0010c8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0010c2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0010c6:	4770      	bx	lr
		return CLKINPUT_PD;
1a0010c8:	2011      	movs	r0, #17
}
1a0010ca:	4770      	bx	lr
1a0010cc:	40050000 	.word	0x40050000

1a0010d0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0010d0:	f100 0212 	add.w	r2, r0, #18
1a0010d4:	4b03      	ldr	r3, [pc, #12]	; (1a0010e4 <Chip_Clock_GetDividerDivisor+0x14>)
1a0010d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0010da:	4b03      	ldr	r3, [pc, #12]	; (1a0010e8 <Chip_Clock_GetDividerDivisor+0x18>)
1a0010dc:	5c18      	ldrb	r0, [r3, r0]
}
1a0010de:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0010e2:	4770      	bx	lr
1a0010e4:	40050000 	.word	0x40050000
1a0010e8:	1a00263c 	.word	0x1a00263c

1a0010ec <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0010ec:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0010ee:	2810      	cmp	r0, #16
1a0010f0:	d80a      	bhi.n	1a001108 <Chip_Clock_GetClockInputHz+0x1c>
1a0010f2:	e8df f000 	tbb	[pc, r0]
1a0010f6:	0b44      	.short	0x0b44
1a0010f8:	0921180d 	.word	0x0921180d
1a0010fc:	2d2a2724 	.word	0x2d2a2724
1a001100:	34300909 	.word	0x34300909
1a001104:	3c38      	.short	0x3c38
1a001106:	40          	.byte	0x40
1a001107:	00          	.byte	0x00
	uint32_t rate = 0;
1a001108:	2000      	movs	r0, #0
1a00110a:	e03a      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a00110c:	481e      	ldr	r0, [pc, #120]	; (1a001188 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00110e:	e038      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001110:	4b1e      	ldr	r3, [pc, #120]	; (1a00118c <Chip_Clock_GetClockInputHz+0xa0>)
1a001112:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001116:	f003 0307 	and.w	r3, r3, #7
1a00111a:	2b04      	cmp	r3, #4
1a00111c:	d001      	beq.n	1a001122 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00111e:	481c      	ldr	r0, [pc, #112]	; (1a001190 <Chip_Clock_GetClockInputHz+0xa4>)
1a001120:	e02f      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001122:	2000      	movs	r0, #0
1a001124:	e02d      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001126:	4b19      	ldr	r3, [pc, #100]	; (1a00118c <Chip_Clock_GetClockInputHz+0xa0>)
1a001128:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00112c:	f003 0307 	and.w	r3, r3, #7
1a001130:	2b04      	cmp	r3, #4
1a001132:	d027      	beq.n	1a001184 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001134:	4816      	ldr	r0, [pc, #88]	; (1a001190 <Chip_Clock_GetClockInputHz+0xa4>)
1a001136:	e024      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001138:	4b16      	ldr	r3, [pc, #88]	; (1a001194 <Chip_Clock_GetClockInputHz+0xa8>)
1a00113a:	6818      	ldr	r0, [r3, #0]
		break;
1a00113c:	e021      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00113e:	4b16      	ldr	r3, [pc, #88]	; (1a001198 <Chip_Clock_GetClockInputHz+0xac>)
1a001140:	6818      	ldr	r0, [r3, #0]
		break;
1a001142:	e01e      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001144:	4b15      	ldr	r3, [pc, #84]	; (1a00119c <Chip_Clock_GetClockInputHz+0xb0>)
1a001146:	6818      	ldr	r0, [r3, #0]
		break;
1a001148:	e01b      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00114a:	4b14      	ldr	r3, [pc, #80]	; (1a00119c <Chip_Clock_GetClockInputHz+0xb0>)
1a00114c:	6858      	ldr	r0, [r3, #4]
		break;
1a00114e:	e018      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001150:	f000 f868 	bl	1a001224 <Chip_Clock_GetMainPLLHz>
		break;
1a001154:	e015      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001156:	2100      	movs	r1, #0
1a001158:	f000 f89a 	bl	1a001290 <Chip_Clock_GetDivRate>
		break;
1a00115c:	e011      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00115e:	2101      	movs	r1, #1
1a001160:	f000 f896 	bl	1a001290 <Chip_Clock_GetDivRate>
		break;
1a001164:	e00d      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001166:	2102      	movs	r1, #2
1a001168:	f000 f892 	bl	1a001290 <Chip_Clock_GetDivRate>
		break;
1a00116c:	e009      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00116e:	2103      	movs	r1, #3
1a001170:	f000 f88e 	bl	1a001290 <Chip_Clock_GetDivRate>
		break;
1a001174:	e005      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001176:	2104      	movs	r1, #4
1a001178:	f000 f88a 	bl	1a001290 <Chip_Clock_GetDivRate>
		break;
1a00117c:	e001      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a00117e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001182:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001184:	4806      	ldr	r0, [pc, #24]	; (1a0011a0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001186:	e7fc      	b.n	1a001182 <Chip_Clock_GetClockInputHz+0x96>
1a001188:	00b71b00 	.word	0x00b71b00
1a00118c:	40043000 	.word	0x40043000
1a001190:	017d7840 	.word	0x017d7840
1a001194:	1a002580 	.word	0x1a002580
1a001198:	1a0025ac 	.word	0x1a0025ac
1a00119c:	10000050 	.word	0x10000050
1a0011a0:	02faf080 	.word	0x02faf080

1a0011a4 <Chip_Clock_CalcMainPLLValue>:
{
1a0011a4:	b538      	push	{r3, r4, r5, lr}
1a0011a6:	4605      	mov	r5, r0
1a0011a8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0011aa:	7908      	ldrb	r0, [r1, #4]
1a0011ac:	f7ff ff9e 	bl	1a0010ec <Chip_Clock_GetClockInputHz>
1a0011b0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0011b2:	4b19      	ldr	r3, [pc, #100]	; (1a001218 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0011b4:	442b      	add	r3, r5
1a0011b6:	4a19      	ldr	r2, [pc, #100]	; (1a00121c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0011b8:	4293      	cmp	r3, r2
1a0011ba:	d821      	bhi.n	1a001200 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0011bc:	b318      	cbz	r0, 1a001206 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0011be:	2380      	movs	r3, #128	; 0x80
1a0011c0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0011c2:	2300      	movs	r3, #0
1a0011c4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0011c6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0011c8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0011cc:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0011ce:	4a14      	ldr	r2, [pc, #80]	; (1a001220 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0011d0:	4295      	cmp	r5, r2
1a0011d2:	d903      	bls.n	1a0011dc <Chip_Clock_CalcMainPLLValue+0x38>
1a0011d4:	fb03 f000 	mul.w	r0, r3, r0
1a0011d8:	42a8      	cmp	r0, r5
1a0011da:	d007      	beq.n	1a0011ec <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0011dc:	4621      	mov	r1, r4
1a0011de:	4628      	mov	r0, r5
1a0011e0:	f7ff fe96 	bl	1a000f10 <pll_get_frac>
		if (!ppll->nsel) {
1a0011e4:	68a3      	ldr	r3, [r4, #8]
1a0011e6:	b18b      	cbz	r3, 1a00120c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0011e8:	3b01      	subs	r3, #1
1a0011ea:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0011ec:	6923      	ldr	r3, [r4, #16]
1a0011ee:	b183      	cbz	r3, 1a001212 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0011f0:	68e2      	ldr	r2, [r4, #12]
1a0011f2:	b10a      	cbz	r2, 1a0011f8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0011f4:	3a01      	subs	r2, #1
1a0011f6:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0011f8:	3b01      	subs	r3, #1
1a0011fa:	6123      	str	r3, [r4, #16]
	return 0;
1a0011fc:	2000      	movs	r0, #0
}
1a0011fe:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001204:	e7fb      	b.n	1a0011fe <Chip_Clock_CalcMainPLLValue+0x5a>
1a001206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00120a:	e7f8      	b.n	1a0011fe <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a00120c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001210:	e7f5      	b.n	1a0011fe <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001216:	e7f2      	b.n	1a0011fe <Chip_Clock_CalcMainPLLValue+0x5a>
1a001218:	ff6b3a10 	.word	0xff6b3a10
1a00121c:	0b940510 	.word	0x0b940510
1a001220:	094c5eff 	.word	0x094c5eff

1a001224 <Chip_Clock_GetMainPLLHz>:
{
1a001224:	b530      	push	{r4, r5, lr}
1a001226:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001228:	4d17      	ldr	r5, [pc, #92]	; (1a001288 <Chip_Clock_GetMainPLLHz+0x64>)
1a00122a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00122c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001230:	f7ff ff5c 	bl	1a0010ec <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001234:	4b15      	ldr	r3, [pc, #84]	; (1a00128c <Chip_Clock_GetMainPLLHz+0x68>)
1a001236:	681b      	ldr	r3, [r3, #0]
1a001238:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00123a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00123c:	f013 0f01 	tst.w	r3, #1
1a001240:	d020      	beq.n	1a001284 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001242:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001246:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00124a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00124e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001252:	3301      	adds	r3, #1
	n = nsel + 1;
1a001254:	3201      	adds	r2, #1
	p = ptab[psel];
1a001256:	f10d 0c08 	add.w	ip, sp, #8
1a00125a:	4461      	add	r1, ip
1a00125c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001260:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001264:	d108      	bne.n	1a001278 <Chip_Clock_GetMainPLLHz+0x54>
1a001266:	b93d      	cbnz	r5, 1a001278 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001268:	0049      	lsls	r1, r1, #1
1a00126a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00126e:	fbb0 f0f2 	udiv	r0, r0, r2
1a001272:	fb00 f003 	mul.w	r0, r0, r3
1a001276:	e003      	b.n	1a001280 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001278:	fbb0 f0f2 	udiv	r0, r0, r2
1a00127c:	fb03 f000 	mul.w	r0, r3, r0
}
1a001280:	b003      	add	sp, #12
1a001282:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001284:	2000      	movs	r0, #0
1a001286:	e7fb      	b.n	1a001280 <Chip_Clock_GetMainPLLHz+0x5c>
1a001288:	40050000 	.word	0x40050000
1a00128c:	1a002638 	.word	0x1a002638

1a001290 <Chip_Clock_GetDivRate>:
{
1a001290:	b538      	push	{r3, r4, r5, lr}
1a001292:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001294:	4608      	mov	r0, r1
1a001296:	f7ff ff0d 	bl	1a0010b4 <Chip_Clock_GetDividerSource>
1a00129a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00129c:	4620      	mov	r0, r4
1a00129e:	f7ff ff17 	bl	1a0010d0 <Chip_Clock_GetDividerDivisor>
1a0012a2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0012a4:	4628      	mov	r0, r5
1a0012a6:	f7ff ff21 	bl	1a0010ec <Chip_Clock_GetClockInputHz>
1a0012aa:	3401      	adds	r4, #1
}
1a0012ac:	fbb0 f0f4 	udiv	r0, r0, r4
1a0012b0:	bd38      	pop	{r3, r4, r5, pc}
1a0012b2:	Address 0x000000001a0012b2 is out of bounds.


1a0012b4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0012b4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0012b6:	f100 0416 	add.w	r4, r0, #22
1a0012ba:	00a4      	lsls	r4, r4, #2
1a0012bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0012c0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0012c4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0012c6:	281b      	cmp	r0, #27
1a0012c8:	d813      	bhi.n	1a0012f2 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0012ca:	2911      	cmp	r1, #17
1a0012cc:	d01a      	beq.n	1a001304 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0012ce:	4d0e      	ldr	r5, [pc, #56]	; (1a001308 <Chip_Clock_SetBaseClock+0x54>)
1a0012d0:	4025      	ands	r5, r4

			if (autoblocken) {
1a0012d2:	b10a      	cbz	r2, 1a0012d8 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0012d4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0012d8:	b10b      	cbz	r3, 1a0012de <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0012da:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0012de:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0012e2:	3016      	adds	r0, #22
1a0012e4:	0080      	lsls	r0, r0, #2
1a0012e6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012ea:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012ee:	6045      	str	r5, [r0, #4]
1a0012f0:	e008      	b.n	1a001304 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0012f2:	f044 0401 	orr.w	r4, r4, #1
1a0012f6:	3016      	adds	r0, #22
1a0012f8:	0080      	lsls	r0, r0, #2
1a0012fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012fe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001302:	6044      	str	r4, [r0, #4]
	}
}
1a001304:	bc30      	pop	{r4, r5}
1a001306:	4770      	bx	lr
1a001308:	e0fff7fe 	.word	0xe0fff7fe

1a00130c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00130c:	281b      	cmp	r0, #27
1a00130e:	d80c      	bhi.n	1a00132a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001310:	3016      	adds	r0, #22
1a001312:	0080      	lsls	r0, r0, #2
1a001314:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001318:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00131c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00131e:	f010 0f01 	tst.w	r0, #1
1a001322:	d104      	bne.n	1a00132e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001324:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001328:	4770      	bx	lr
		return CLKINPUT_PD;
1a00132a:	2011      	movs	r0, #17
1a00132c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00132e:	2011      	movs	r0, #17
}
1a001330:	4770      	bx	lr

1a001332 <Chip_Clock_GetBaseClocktHz>:
{
1a001332:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001334:	f7ff ffea 	bl	1a00130c <Chip_Clock_GetBaseClock>
1a001338:	f7ff fed8 	bl	1a0010ec <Chip_Clock_GetClockInputHz>
}
1a00133c:	bd08      	pop	{r3, pc}
1a00133e:	Address 0x000000001a00133e is out of bounds.


1a001340 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001340:	b971      	cbnz	r1, 1a001360 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001342:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001344:	b10a      	cbz	r2, 1a00134a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001346:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00134a:	2b02      	cmp	r3, #2
1a00134c:	d00a      	beq.n	1a001364 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00134e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001352:	d30a      	bcc.n	1a00136a <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001354:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001358:	4b06      	ldr	r3, [pc, #24]	; (1a001374 <Chip_Clock_EnableOpts+0x34>)
1a00135a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00135e:	4770      	bx	lr
		reg |= (1 << 1);
1a001360:	2103      	movs	r1, #3
1a001362:	e7ef      	b.n	1a001344 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001364:	f041 0120 	orr.w	r1, r1, #32
1a001368:	e7f1      	b.n	1a00134e <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00136a:	3020      	adds	r0, #32
1a00136c:	4b02      	ldr	r3, [pc, #8]	; (1a001378 <Chip_Clock_EnableOpts+0x38>)
1a00136e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001372:	4770      	bx	lr
1a001374:	40052000 	.word	0x40052000
1a001378:	40051000 	.word	0x40051000

1a00137c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00137c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001380:	d309      	bcc.n	1a001396 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001382:	4a09      	ldr	r2, [pc, #36]	; (1a0013a8 <Chip_Clock_Enable+0x2c>)
1a001384:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001388:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00138c:	f043 0301 	orr.w	r3, r3, #1
1a001390:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001394:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001396:	4a05      	ldr	r2, [pc, #20]	; (1a0013ac <Chip_Clock_Enable+0x30>)
1a001398:	3020      	adds	r0, #32
1a00139a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00139e:	f043 0301 	orr.w	r3, r3, #1
1a0013a2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0013a6:	4770      	bx	lr
1a0013a8:	40052000 	.word	0x40052000
1a0013ac:	40051000 	.word	0x40051000

1a0013b0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0013b0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0013b2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0013b6:	d309      	bcc.n	1a0013cc <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0013b8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0013bc:	4a0d      	ldr	r2, [pc, #52]	; (1a0013f4 <Chip_Clock_GetRate+0x44>)
1a0013be:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0013c2:	f014 0f01 	tst.w	r4, #1
1a0013c6:	d107      	bne.n	1a0013d8 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0013c8:	2000      	movs	r0, #0
	}

	return rate;
}
1a0013ca:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0013cc:	f100 0320 	add.w	r3, r0, #32
1a0013d0:	4a09      	ldr	r2, [pc, #36]	; (1a0013f8 <Chip_Clock_GetRate+0x48>)
1a0013d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0013d6:	e7f4      	b.n	1a0013c2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0013d8:	f7ff fe20 	bl	1a00101c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0013dc:	f7ff ffa9 	bl	1a001332 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0013e0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0013e4:	d103      	bne.n	1a0013ee <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0013e6:	2301      	movs	r3, #1
		rate = rate / div;
1a0013e8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0013ec:	e7ed      	b.n	1a0013ca <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0013ee:	2302      	movs	r3, #2
1a0013f0:	e7fa      	b.n	1a0013e8 <Chip_Clock_GetRate+0x38>
1a0013f2:	bf00      	nop
1a0013f4:	40052000 	.word	0x40052000
1a0013f8:	40051000 	.word	0x40051000

1a0013fc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0013fc:	4770      	bx	lr
1a0013fe:	Address 0x000000001a0013fe is out of bounds.


1a001400 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001400:	b570      	push	{r4, r5, r6, lr}
1a001402:	b08a      	sub	sp, #40	; 0x28
1a001404:	4605      	mov	r5, r0
1a001406:	460e      	mov	r6, r1
1a001408:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00140a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00140e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001410:	2806      	cmp	r0, #6
1a001412:	d018      	beq.n	1a001446 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001414:	2300      	movs	r3, #0
1a001416:	2201      	movs	r2, #1
1a001418:	4629      	mov	r1, r5
1a00141a:	2004      	movs	r0, #4
1a00141c:	f7ff ff4a 	bl	1a0012b4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001420:	4a4a      	ldr	r2, [pc, #296]	; (1a00154c <Chip_SetupCoreClock+0x14c>)
1a001422:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001424:	f043 0301 	orr.w	r3, r3, #1
1a001428:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00142a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00142e:	a901      	add	r1, sp, #4
1a001430:	4630      	mov	r0, r6
1a001432:	f7ff feb7 	bl	1a0011a4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001436:	4b46      	ldr	r3, [pc, #280]	; (1a001550 <Chip_SetupCoreClock+0x150>)
1a001438:	429e      	cmp	r6, r3
1a00143a:	d916      	bls.n	1a00146a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00143c:	9b01      	ldr	r3, [sp, #4]
1a00143e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001442:	d003      	beq.n	1a00144c <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001444:	e7fe      	b.n	1a001444 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001446:	f7ff fe0f 	bl	1a001068 <Chip_Clock_EnableCrystal>
1a00144a:	e7e3      	b.n	1a001414 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a00144c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001450:	d005      	beq.n	1a00145e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001456:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001458:	2500      	movs	r5, #0
			direct = 1;
1a00145a:	2601      	movs	r6, #1
1a00145c:	e007      	b.n	1a00146e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00145e:	9b04      	ldr	r3, [sp, #16]
1a001460:	3301      	adds	r3, #1
1a001462:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001464:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001466:	2600      	movs	r6, #0
1a001468:	e001      	b.n	1a00146e <Chip_SetupCoreClock+0x6e>
1a00146a:	2500      	movs	r5, #0
1a00146c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00146e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001472:	9b01      	ldr	r3, [sp, #4]
1a001474:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001478:	9a05      	ldr	r2, [sp, #20]
1a00147a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00147e:	9a03      	ldr	r2, [sp, #12]
1a001480:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001484:	9a04      	ldr	r2, [sp, #16]
1a001486:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00148a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00148e:	4a2f      	ldr	r2, [pc, #188]	; (1a00154c <Chip_SetupCoreClock+0x14c>)
1a001490:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001492:	4b2e      	ldr	r3, [pc, #184]	; (1a00154c <Chip_SetupCoreClock+0x14c>)
1a001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001496:	f013 0f01 	tst.w	r3, #1
1a00149a:	d0fa      	beq.n	1a001492 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00149c:	2300      	movs	r3, #0
1a00149e:	2201      	movs	r2, #1
1a0014a0:	2109      	movs	r1, #9
1a0014a2:	2004      	movs	r0, #4
1a0014a4:	f7ff ff06 	bl	1a0012b4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0014a8:	b306      	cbz	r6, 1a0014ec <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0014aa:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0014ae:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0014b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0014b2:	1e5a      	subs	r2, r3, #1
1a0014b4:	9209      	str	r2, [sp, #36]	; 0x24
1a0014b6:	2b00      	cmp	r3, #0
1a0014b8:	d1fa      	bne.n	1a0014b0 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0014ba:	9b01      	ldr	r3, [sp, #4]
1a0014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0014c0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0014c2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0014c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0014ca:	9a05      	ldr	r2, [sp, #20]
1a0014cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0014d0:	9a03      	ldr	r2, [sp, #12]
1a0014d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0014d6:	9a04      	ldr	r2, [sp, #16]
1a0014d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0014dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0014e0:	4a1a      	ldr	r2, [pc, #104]	; (1a00154c <Chip_SetupCoreClock+0x14c>)
1a0014e2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0014e4:	2c00      	cmp	r4, #0
1a0014e6:	d12e      	bne.n	1a001546 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0014e8:	b00a      	add	sp, #40	; 0x28
1a0014ea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0014ec:	2d00      	cmp	r5, #0
1a0014ee:	d0f9      	beq.n	1a0014e4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0014f0:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0014f4:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0014f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0014f8:	1e5a      	subs	r2, r3, #1
1a0014fa:	9209      	str	r2, [sp, #36]	; 0x24
1a0014fc:	2b00      	cmp	r3, #0
1a0014fe:	d1fa      	bne.n	1a0014f6 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001500:	9b04      	ldr	r3, [sp, #16]
1a001502:	1e5a      	subs	r2, r3, #1
1a001504:	9204      	str	r2, [sp, #16]
1a001506:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00150a:	9b01      	ldr	r3, [sp, #4]
1a00150c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001510:	9905      	ldr	r1, [sp, #20]
1a001512:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001516:	9903      	ldr	r1, [sp, #12]
1a001518:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00151c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001524:	4a09      	ldr	r2, [pc, #36]	; (1a00154c <Chip_SetupCoreClock+0x14c>)
1a001526:	6453      	str	r3, [r2, #68]	; 0x44
1a001528:	e7dc      	b.n	1a0014e4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00152a:	480a      	ldr	r0, [pc, #40]	; (1a001554 <Chip_SetupCoreClock+0x154>)
1a00152c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001530:	78cb      	ldrb	r3, [r1, #3]
1a001532:	788a      	ldrb	r2, [r1, #2]
1a001534:	7849      	ldrb	r1, [r1, #1]
1a001536:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00153a:	f7ff febb 	bl	1a0012b4 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00153e:	3401      	adds	r4, #1
1a001540:	2c11      	cmp	r4, #17
1a001542:	d9f2      	bls.n	1a00152a <Chip_SetupCoreClock+0x12a>
1a001544:	e7d0      	b.n	1a0014e8 <Chip_SetupCoreClock+0xe8>
1a001546:	2400      	movs	r4, #0
1a001548:	e7fa      	b.n	1a001540 <Chip_SetupCoreClock+0x140>
1a00154a:	bf00      	nop
1a00154c:	40050000 	.word	0x40050000
1a001550:	068e7780 	.word	0x068e7780
1a001554:	1a0026b0 	.word	0x1a0026b0

1a001558 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001558:	4b03      	ldr	r3, [pc, #12]	; (1a001568 <Chip_SSP_GetClockIndex+0x10>)
1a00155a:	4298      	cmp	r0, r3
1a00155c:	d001      	beq.n	1a001562 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00155e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001560:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001562:	20a5      	movs	r0, #165	; 0xa5
1a001564:	4770      	bx	lr
1a001566:	bf00      	nop
1a001568:	400c5000 	.word	0x400c5000

1a00156c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00156c:	4b04      	ldr	r3, [pc, #16]	; (1a001580 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00156e:	4298      	cmp	r0, r3
1a001570:	d002      	beq.n	1a001578 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001572:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001576:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001578:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00157c:	4770      	bx	lr
1a00157e:	bf00      	nop
1a001580:	400c5000 	.word	0x400c5000

1a001584 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001584:	6803      	ldr	r3, [r0, #0]
1a001586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00158a:	0209      	lsls	r1, r1, #8
1a00158c:	b289      	uxth	r1, r1
1a00158e:	4319      	orrs	r1, r3
1a001590:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001592:	6102      	str	r2, [r0, #16]
}
1a001594:	4770      	bx	lr

1a001596 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001596:	b570      	push	{r4, r5, r6, lr}
1a001598:	4606      	mov	r6, r0
1a00159a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00159c:	f7ff ffe6 	bl	1a00156c <Chip_SSP_GetPeriphClockIndex>
1a0015a0:	f7ff ff06 	bl	1a0013b0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0015a4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0015a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0015aa:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0015ac:	e000      	b.n	1a0015b0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0015ae:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0015b0:	42ab      	cmp	r3, r5
1a0015b2:	d90b      	bls.n	1a0015cc <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0015b4:	1c4c      	adds	r4, r1, #1
1a0015b6:	fb02 f304 	mul.w	r3, r2, r4
1a0015ba:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0015be:	429d      	cmp	r5, r3
1a0015c0:	d2f6      	bcs.n	1a0015b0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0015c2:	2cff      	cmp	r4, #255	; 0xff
1a0015c4:	d9f3      	bls.n	1a0015ae <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0015c6:	3202      	adds	r2, #2
				cr0_div = 0;
1a0015c8:	2100      	movs	r1, #0
1a0015ca:	e7f1      	b.n	1a0015b0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0015cc:	4630      	mov	r0, r6
1a0015ce:	f7ff ffd9 	bl	1a001584 <Chip_SSP_SetClockRate>
}
1a0015d2:	bd70      	pop	{r4, r5, r6, pc}

1a0015d4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0015d4:	b510      	push	{r4, lr}
1a0015d6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0015d8:	f7ff ffbe 	bl	1a001558 <Chip_SSP_GetClockIndex>
1a0015dc:	f7ff fece 	bl	1a00137c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0015e0:	4620      	mov	r0, r4
1a0015e2:	f7ff ffc3 	bl	1a00156c <Chip_SSP_GetPeriphClockIndex>
1a0015e6:	f7ff fec9 	bl	1a00137c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0015ea:	6863      	ldr	r3, [r4, #4]
1a0015ec:	f023 0304 	bic.w	r3, r3, #4
1a0015f0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0015f2:	6823      	ldr	r3, [r4, #0]
1a0015f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0015f8:	f043 0307 	orr.w	r3, r3, #7
1a0015fc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0015fe:	4902      	ldr	r1, [pc, #8]	; (1a001608 <Chip_SSP_Init+0x34>)
1a001600:	4620      	mov	r0, r4
1a001602:	f7ff ffc8 	bl	1a001596 <Chip_SSP_SetBitRate>
}
1a001606:	bd10      	pop	{r4, pc}
1a001608:	000186a0 	.word	0x000186a0

1a00160c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00160c:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00160e:	4a0b      	ldr	r2, [pc, #44]	; (1a00163c <SystemInit+0x30>)
1a001610:	4b0b      	ldr	r3, [pc, #44]	; (1a001640 <SystemInit+0x34>)
1a001612:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001614:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001618:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00161a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00161e:	2b20      	cmp	r3, #32
1a001620:	d004      	beq.n	1a00162c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001622:	f7ff faa5 	bl	1a000b70 <Board_SystemInit>
   Board_Init();
1a001626:	f7ff fa35 	bl	1a000a94 <Board_Init>
}
1a00162a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00162c:	4a04      	ldr	r2, [pc, #16]	; (1a001640 <SystemInit+0x34>)
1a00162e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001632:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001636:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00163a:	e7f2      	b.n	1a001622 <SystemInit+0x16>
1a00163c:	1a000000 	.word	0x1a000000
1a001640:	e000ed00 	.word	0xe000ed00

1a001644 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001644:	4b04      	ldr	r3, [pc, #16]	; (1a001658 <cyclesCounterInit+0x14>)
1a001646:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001648:	4a04      	ldr	r2, [pc, #16]	; (1a00165c <cyclesCounterInit+0x18>)
1a00164a:	6813      	ldr	r3, [r2, #0]
1a00164c:	f043 0301 	orr.w	r3, r3, #1
1a001650:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001652:	2001      	movs	r0, #1
1a001654:	4770      	bx	lr
1a001656:	bf00      	nop
1a001658:	1000003c 	.word	0x1000003c
1a00165c:	e0001000 	.word	0xe0001000

1a001660 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001660:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001664:	0083      	lsls	r3, r0, #2
1a001666:	4a03      	ldr	r2, [pc, #12]	; (1a001674 <uartTxReady+0x14>)
1a001668:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00166a:	6958      	ldr	r0, [r3, #20]
}
1a00166c:	f000 0020 	and.w	r0, r0, #32
1a001670:	4770      	bx	lr
1a001672:	bf00      	nop
1a001674:	1a0026f8 	.word	0x1a0026f8

1a001678 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00167c:	0083      	lsls	r3, r0, #2
1a00167e:	4a02      	ldr	r2, [pc, #8]	; (1a001688 <uartTxWrite+0x10>)
1a001680:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001682:	6019      	str	r1, [r3, #0]
}
1a001684:	4770      	bx	lr
1a001686:	bf00      	nop
1a001688:	1a0026f8 	.word	0x1a0026f8

1a00168c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a00168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001690:	4680      	mov	r8, r0
1a001692:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001694:	4c19      	ldr	r4, [pc, #100]	; (1a0016fc <uartInit+0x70>)
1a001696:	0045      	lsls	r5, r0, #1
1a001698:	182a      	adds	r2, r5, r0
1a00169a:	0093      	lsls	r3, r2, #2
1a00169c:	18e6      	adds	r6, r4, r3
1a00169e:	58e7      	ldr	r7, [r4, r3]
1a0016a0:	4638      	mov	r0, r7
1a0016a2:	f7ff fabf 	bl	1a000c24 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0016a6:	4649      	mov	r1, r9
1a0016a8:	4638      	mov	r0, r7
1a0016aa:	f7ff fae5 	bl	1a000c78 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0016ae:	2307      	movs	r3, #7
1a0016b0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0016b2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0016b4:	2301      	movs	r3, #1
1a0016b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0016b8:	7930      	ldrb	r0, [r6, #4]
1a0016ba:	7973      	ldrb	r3, [r6, #5]
1a0016bc:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0016be:	f042 0218 	orr.w	r2, r2, #24
1a0016c2:	490f      	ldr	r1, [pc, #60]	; (1a001700 <uartInit+0x74>)
1a0016c4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0016cc:	79f0      	ldrb	r0, [r6, #7]
1a0016ce:	7a33      	ldrb	r3, [r6, #8]
1a0016d0:	7a72      	ldrb	r2, [r6, #9]
1a0016d2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0016d6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0016de:	f1b8 0f01 	cmp.w	r8, #1
1a0016e2:	d001      	beq.n	1a0016e8 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0016e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0016e8:	4a06      	ldr	r2, [pc, #24]	; (1a001704 <uartInit+0x78>)
1a0016ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0016ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0016f2:	221a      	movs	r2, #26
1a0016f4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0016f8:	e7f4      	b.n	1a0016e4 <uartInit+0x58>
1a0016fa:	bf00      	nop
1a0016fc:	1a0026f8 	.word	0x1a0026f8
1a001700:	40086000 	.word	0x40086000
1a001704:	40081000 	.word	0x40081000

1a001708 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a001708:	b538      	push	{r3, r4, r5, lr}
1a00170a:	4604      	mov	r4, r0
1a00170c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00170e:	4620      	mov	r0, r4
1a001710:	f7ff ffa6 	bl	1a001660 <uartTxReady>
1a001714:	2800      	cmp	r0, #0
1a001716:	d0fa      	beq.n	1a00170e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a001718:	4629      	mov	r1, r5
1a00171a:	4620      	mov	r0, r4
1a00171c:	f7ff ffac 	bl	1a001678 <uartTxWrite>
}
1a001720:	bd38      	pop	{r3, r4, r5, pc}

1a001722 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a001722:	b538      	push	{r3, r4, r5, lr}
1a001724:	4605      	mov	r5, r0
1a001726:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001728:	7821      	ldrb	r1, [r4, #0]
1a00172a:	b121      	cbz	r1, 1a001736 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a00172c:	4628      	mov	r0, r5
1a00172e:	f7ff ffeb 	bl	1a001708 <uartWriteByte>
      str++;
1a001732:	3401      	adds	r4, #1
1a001734:	e7f8      	b.n	1a001728 <uartWriteString+0x6>
   }
}
1a001736:	bd38      	pop	{r3, r4, r5, pc}

1a001738 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001738:	4b01      	ldr	r3, [pc, #4]	; (1a001740 <tickRead+0x8>)
1a00173a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00173e:	4770      	bx	lr
1a001740:	10000060 	.word	0x10000060

1a001744 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001744:	b118      	cbz	r0, 1a00174e <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001746:	4b04      	ldr	r3, [pc, #16]	; (1a001758 <tickPowerSet+0x14>)
1a001748:	2207      	movs	r2, #7
1a00174a:	601a      	str	r2, [r3, #0]
1a00174c:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00174e:	4b02      	ldr	r3, [pc, #8]	; (1a001758 <tickPowerSet+0x14>)
1a001750:	2200      	movs	r2, #0
1a001752:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001754:	4770      	bx	lr
1a001756:	bf00      	nop
1a001758:	e000e010 	.word	0xe000e010

1a00175c <tickInit>:
{
1a00175c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00175e:	ea50 0401 	orrs.w	r4, r0, r1
1a001762:	d02a      	beq.n	1a0017ba <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001764:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001768:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00176c:	2b00      	cmp	r3, #0
1a00176e:	bf08      	it	eq
1a001770:	2a32      	cmpeq	r2, #50	; 0x32
1a001772:	d227      	bcs.n	1a0017c4 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001774:	4b14      	ldr	r3, [pc, #80]	; (1a0017c8 <tickInit+0x6c>)
1a001776:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00177a:	4b14      	ldr	r3, [pc, #80]	; (1a0017cc <tickInit+0x70>)
1a00177c:	681b      	ldr	r3, [r3, #0]
1a00177e:	fba3 4500 	umull	r4, r5, r3, r0
1a001782:	fb03 5501 	mla	r5, r3, r1, r5
1a001786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00178a:	2300      	movs	r3, #0
1a00178c:	4620      	mov	r0, r4
1a00178e:	4629      	mov	r1, r5
1a001790:	f000 fb06 	bl	1a001da0 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001794:	3801      	subs	r0, #1
1a001796:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00179a:	d209      	bcs.n	1a0017b0 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00179c:	4b0c      	ldr	r3, [pc, #48]	; (1a0017d0 <tickInit+0x74>)
1a00179e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0017a0:	4a0c      	ldr	r2, [pc, #48]	; (1a0017d4 <tickInit+0x78>)
1a0017a2:	21e0      	movs	r1, #224	; 0xe0
1a0017a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0017a8:	2200      	movs	r2, #0
1a0017aa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0017ac:	2207      	movs	r2, #7
1a0017ae:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0017b0:	2001      	movs	r0, #1
1a0017b2:	f7ff ffc7 	bl	1a001744 <tickPowerSet>
      bool_t ret_val = 1;
1a0017b6:	2001      	movs	r0, #1
}
1a0017b8:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0017ba:	2000      	movs	r0, #0
1a0017bc:	f7ff ffc2 	bl	1a001744 <tickPowerSet>
         ret_val = 0;
1a0017c0:	2000      	movs	r0, #0
1a0017c2:	e7f9      	b.n	1a0017b8 <tickInit+0x5c>
            ret_val = 0;
1a0017c4:	2000      	movs	r0, #0
1a0017c6:	e7f7      	b.n	1a0017b8 <tickInit+0x5c>
1a0017c8:	10000040 	.word	0x10000040
1a0017cc:	10000198 	.word	0x10000198
1a0017d0:	e000e010 	.word	0xe000e010
1a0017d4:	e000ed00 	.word	0xe000ed00

1a0017d8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0017d8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0017da:	4a07      	ldr	r2, [pc, #28]	; (1a0017f8 <SysTick_Handler+0x20>)
1a0017dc:	6813      	ldr	r3, [r2, #0]
1a0017de:	6851      	ldr	r1, [r2, #4]
1a0017e0:	3301      	adds	r3, #1
1a0017e2:	f141 0100 	adc.w	r1, r1, #0
1a0017e6:	6013      	str	r3, [r2, #0]
1a0017e8:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0017ea:	4b04      	ldr	r3, [pc, #16]	; (1a0017fc <SysTick_Handler+0x24>)
1a0017ec:	681b      	ldr	r3, [r3, #0]
1a0017ee:	b113      	cbz	r3, 1a0017f6 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0017f0:	4a03      	ldr	r2, [pc, #12]	; (1a001800 <SysTick_Handler+0x28>)
1a0017f2:	6810      	ldr	r0, [r2, #0]
1a0017f4:	4798      	blx	r3
   }
}
1a0017f6:	bd08      	pop	{r3, pc}
1a0017f8:	10000060 	.word	0x10000060
1a0017fc:	10000068 	.word	0x10000068
1a001800:	10000058 	.word	0x10000058

1a001804 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001804:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001806:	4d0b      	ldr	r5, [pc, #44]	; (1a001834 <gpioObtainPinInit+0x30>)
1a001808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00180c:	182c      	adds	r4, r5, r0
1a00180e:	5628      	ldrsb	r0, [r5, r0]
1a001810:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001812:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001816:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001818:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00181c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00181e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001822:	9b02      	ldr	r3, [sp, #8]
1a001824:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001826:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00182a:	9b03      	ldr	r3, [sp, #12]
1a00182c:	701a      	strb	r2, [r3, #0]
}
1a00182e:	bc30      	pop	{r4, r5}
1a001830:	4770      	bx	lr
1a001832:	bf00      	nop
1a001834:	1a002740 	.word	0x1a002740

1a001838 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001838:	f110 0f02 	cmn.w	r0, #2
1a00183c:	f000 80c7 	beq.w	1a0019ce <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001840:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001844:	f000 80c5 	beq.w	1a0019d2 <gpioInit+0x19a>
{
1a001848:	b570      	push	{r4, r5, r6, lr}
1a00184a:	b084      	sub	sp, #16
1a00184c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00184e:	2300      	movs	r3, #0
1a001850:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001854:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001858:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00185c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001860:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001864:	f10d 030b 	add.w	r3, sp, #11
1a001868:	9301      	str	r3, [sp, #4]
1a00186a:	ab03      	add	r3, sp, #12
1a00186c:	9300      	str	r3, [sp, #0]
1a00186e:	f10d 030d 	add.w	r3, sp, #13
1a001872:	f10d 020e 	add.w	r2, sp, #14
1a001876:	f10d 010f 	add.w	r1, sp, #15
1a00187a:	f7ff ffc3 	bl	1a001804 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00187e:	2c05      	cmp	r4, #5
1a001880:	f200 80a9 	bhi.w	1a0019d6 <gpioInit+0x19e>
1a001884:	e8df f004 	tbb	[pc, r4]
1a001888:	45278109 	.word	0x45278109
1a00188c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00188e:	4853      	ldr	r0, [pc, #332]	; (1a0019dc <gpioInit+0x1a4>)
1a001890:	f7ff fdb4 	bl	1a0013fc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001894:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001896:	b004      	add	sp, #16
1a001898:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00189a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00189e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0018a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0018a6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0018aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0018ae:	494c      	ldr	r1, [pc, #304]	; (1a0019e0 <gpioInit+0x1a8>)
1a0018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0018b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0018b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0018bc:	2001      	movs	r0, #1
1a0018be:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0018c2:	4c46      	ldr	r4, [pc, #280]	; (1a0019dc <gpioInit+0x1a4>)
1a0018c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0018c8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0018cc:	ea22 0201 	bic.w	r2, r2, r1
1a0018d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0018d4:	e7df      	b.n	1a001896 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0018d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0018da:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0018de:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0018e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0018e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0018ea:	493d      	ldr	r1, [pc, #244]	; (1a0019e0 <gpioInit+0x1a8>)
1a0018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0018f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0018f4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0018f8:	2001      	movs	r0, #1
1a0018fa:	fa00 f102 	lsl.w	r1, r0, r2
1a0018fe:	4c37      	ldr	r4, [pc, #220]	; (1a0019dc <gpioInit+0x1a4>)
1a001900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001904:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001908:	ea22 0201 	bic.w	r2, r2, r1
1a00190c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001910:	e7c1      	b.n	1a001896 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001912:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001916:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00191a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00191e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001922:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001926:	492e      	ldr	r1, [pc, #184]	; (1a0019e0 <gpioInit+0x1a8>)
1a001928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00192c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001930:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001934:	2001      	movs	r0, #1
1a001936:	fa00 f102 	lsl.w	r1, r0, r2
1a00193a:	4c28      	ldr	r4, [pc, #160]	; (1a0019dc <gpioInit+0x1a4>)
1a00193c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001940:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001944:	ea22 0201 	bic.w	r2, r2, r1
1a001948:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00194c:	e7a3      	b.n	1a001896 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00194e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001952:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001956:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00195a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00195e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001962:	491f      	ldr	r1, [pc, #124]	; (1a0019e0 <gpioInit+0x1a8>)
1a001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001968:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00196c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001970:	2001      	movs	r0, #1
1a001972:	fa00 f102 	lsl.w	r1, r0, r2
1a001976:	4c19      	ldr	r4, [pc, #100]	; (1a0019dc <gpioInit+0x1a4>)
1a001978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00197c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001980:	ea22 0201 	bic.w	r2, r2, r1
1a001984:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001988:	e785      	b.n	1a001896 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00198a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00198e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001992:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001996:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00199a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00199e:	4910      	ldr	r1, [pc, #64]	; (1a0019e0 <gpioInit+0x1a8>)
1a0019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0019a4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0019a8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0019ac:	2001      	movs	r0, #1
1a0019ae:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0019b2:	4b0a      	ldr	r3, [pc, #40]	; (1a0019dc <gpioInit+0x1a4>)
1a0019b4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0019b8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0019bc:	4331      	orrs	r1, r6
1a0019be:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0019c2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0019c4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0019c8:	2100      	movs	r1, #0
1a0019ca:	5499      	strb	r1, [r3, r2]
1a0019cc:	e763      	b.n	1a001896 <gpioInit+0x5e>
	  return FALSE;
1a0019ce:	2000      	movs	r0, #0
1a0019d0:	4770      	bx	lr
	  return FALSE;
1a0019d2:	2000      	movs	r0, #0
}
1a0019d4:	4770      	bx	lr
      ret_val = 0;
1a0019d6:	2000      	movs	r0, #0
1a0019d8:	e75d      	b.n	1a001896 <gpioInit+0x5e>
1a0019da:	bf00      	nop
1a0019dc:	400f4000 	.word	0x400f4000
1a0019e0:	40086000 	.word	0x40086000

1a0019e4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0019e4:	f110 0f02 	cmn.w	r0, #2
1a0019e8:	d02d      	beq.n	1a001a46 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0019ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0019ee:	d02c      	beq.n	1a001a4a <gpioWrite+0x66>
{
1a0019f0:	b510      	push	{r4, lr}
1a0019f2:	b084      	sub	sp, #16
1a0019f4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0019f6:	2300      	movs	r3, #0
1a0019f8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0019fc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001a00:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001a04:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001a08:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001a0c:	f10d 030b 	add.w	r3, sp, #11
1a001a10:	9301      	str	r3, [sp, #4]
1a001a12:	ab03      	add	r3, sp, #12
1a001a14:	9300      	str	r3, [sp, #0]
1a001a16:	f10d 030d 	add.w	r3, sp, #13
1a001a1a:	f10d 020e 	add.w	r2, sp, #14
1a001a1e:	f10d 010f 	add.w	r1, sp, #15
1a001a22:	f7ff feef 	bl	1a001804 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001a26:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001a2e:	1c21      	adds	r1, r4, #0
1a001a30:	bf18      	it	ne
1a001a32:	2101      	movne	r1, #1
1a001a34:	015b      	lsls	r3, r3, #5
1a001a36:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001a3a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001a3e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001a40:	2001      	movs	r0, #1
}
1a001a42:	b004      	add	sp, #16
1a001a44:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001a46:	2000      	movs	r0, #0
1a001a48:	4770      	bx	lr
	  return FALSE;
1a001a4a:	2000      	movs	r0, #0
}
1a001a4c:	4770      	bx	lr

1a001a4e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a001a4e:	f110 0f02 	cmn.w	r0, #2
1a001a52:	d02c      	beq.n	1a001aae <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001a54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a58:	d02b      	beq.n	1a001ab2 <gpioRead+0x64>
{
1a001a5a:	b500      	push	{lr}
1a001a5c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001a5e:	2300      	movs	r3, #0
1a001a60:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001a64:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001a68:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001a6c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001a70:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001a74:	f10d 030b 	add.w	r3, sp, #11
1a001a78:	9301      	str	r3, [sp, #4]
1a001a7a:	ab03      	add	r3, sp, #12
1a001a7c:	9300      	str	r3, [sp, #0]
1a001a7e:	f10d 030d 	add.w	r3, sp, #13
1a001a82:	f10d 020e 	add.w	r2, sp, #14
1a001a86:	f10d 010f 	add.w	r1, sp, #15
1a001a8a:	f7ff febb 	bl	1a001804 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001a8e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001a92:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001a96:	015b      	lsls	r3, r3, #5
1a001a98:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001a9c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001aa0:	5c98      	ldrb	r0, [r3, r2]
1a001aa2:	3000      	adds	r0, #0
1a001aa4:	bf18      	it	ne
1a001aa6:	2001      	movne	r0, #1

   return ret_val;
}
1a001aa8:	b005      	add	sp, #20
1a001aaa:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a001aae:	2001      	movs	r0, #1
1a001ab0:	4770      	bx	lr
      return FALSE;
1a001ab2:	2000      	movs	r0, #0
}
1a001ab4:	4770      	bx	lr
1a001ab6:	Address 0x000000001a001ab6 is out of bounds.


1a001ab8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001ab8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001aba:	4b04      	ldr	r3, [pc, #16]	; (1a001acc <USB0_IRQHandler+0x14>)
1a001abc:	681b      	ldr	r3, [r3, #0]
1a001abe:	681b      	ldr	r3, [r3, #0]
1a001ac0:	68db      	ldr	r3, [r3, #12]
1a001ac2:	4a03      	ldr	r2, [pc, #12]	; (1a001ad0 <USB0_IRQHandler+0x18>)
1a001ac4:	6810      	ldr	r0, [r2, #0]
1a001ac6:	4798      	blx	r3
}
1a001ac8:	bd08      	pop	{r3, pc}
1a001aca:	bf00      	nop
1a001acc:	1000019c 	.word	0x1000019c
1a001ad0:	1000006c 	.word	0x1000006c

1a001ad4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001ad4:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001ad6:	f7ff f9c1 	bl	1a000e5c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001ada:	4b1a      	ldr	r3, [pc, #104]	; (1a001b44 <boardInit+0x70>)
1a001adc:	6818      	ldr	r0, [r3, #0]
1a001ade:	f7ff fdb1 	bl	1a001644 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001ae2:	2001      	movs	r0, #1
1a001ae4:	2100      	movs	r1, #0
1a001ae6:	f7ff fe39 	bl	1a00175c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001aea:	2105      	movs	r1, #5
1a001aec:	2000      	movs	r0, #0
1a001aee:	f7ff fea3 	bl	1a001838 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001af2:	2100      	movs	r1, #0
1a001af4:	2024      	movs	r0, #36	; 0x24
1a001af6:	f7ff fe9f 	bl	1a001838 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001afa:	2100      	movs	r1, #0
1a001afc:	2025      	movs	r0, #37	; 0x25
1a001afe:	f7ff fe9b 	bl	1a001838 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001b02:	2100      	movs	r1, #0
1a001b04:	2026      	movs	r0, #38	; 0x26
1a001b06:	f7ff fe97 	bl	1a001838 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001b0a:	2100      	movs	r1, #0
1a001b0c:	2027      	movs	r0, #39	; 0x27
1a001b0e:	f7ff fe93 	bl	1a001838 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001b12:	2101      	movs	r1, #1
1a001b14:	2028      	movs	r0, #40	; 0x28
1a001b16:	f7ff fe8f 	bl	1a001838 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001b1a:	2101      	movs	r1, #1
1a001b1c:	2029      	movs	r0, #41	; 0x29
1a001b1e:	f7ff fe8b 	bl	1a001838 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001b22:	2101      	movs	r1, #1
1a001b24:	202a      	movs	r0, #42	; 0x2a
1a001b26:	f7ff fe87 	bl	1a001838 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001b2a:	2101      	movs	r1, #1
1a001b2c:	202b      	movs	r0, #43	; 0x2b
1a001b2e:	f7ff fe83 	bl	1a001838 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001b32:	2101      	movs	r1, #1
1a001b34:	202c      	movs	r0, #44	; 0x2c
1a001b36:	f7ff fe7f 	bl	1a001838 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001b3a:	2101      	movs	r1, #1
1a001b3c:	202d      	movs	r0, #45	; 0x2d
1a001b3e:	f7ff fe7b 	bl	1a001838 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001b42:	bd08      	pop	{r3, pc}
1a001b44:	10000198 	.word	0x10000198

1a001b48 <buttonEventGet>:

// Get Button last event
buttonFsmState_t buttonEventGet( button_t* button )
{
   return button->event;
}
1a001b48:	f890 0020 	ldrb.w	r0, [r0, #32]
1a001b4c:	4770      	bx	lr

1a001b4e <buttonEventHandled>:

// Event was handled
void buttonEventHandled( button_t* button )
{
   button->event = BUTTON_EVENT_HANDLED;
1a001b4e:	2204      	movs	r2, #4
1a001b50:	2300      	movs	r3, #0
1a001b52:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
1a001b56:	4770      	bx	lr

1a001b58 <buttonIsUp>:

// LOW LEVEL FUNCTIONS --------------------------------------

// Return true if button is up
bool_t buttonIsUp( button_t* button )
{
1a001b58:	b510      	push	{r4, lr}
1a001b5a:	4604      	mov	r4, r0
   bool_t gpioStatus = gpioRead( button->gpio );
1a001b5c:	f990 0000 	ldrsb.w	r0, [r0]
1a001b60:	f7ff ff75 	bl	1a001a4e <gpioRead>
   if( button->logic == BUTTON_ONE_IS_UP ){
1a001b64:	7923      	ldrb	r3, [r4, #4]
1a001b66:	2b01      	cmp	r3, #1
1a001b68:	d002      	beq.n	1a001b70 <buttonIsUp+0x18>
      return gpioStatus;
   } else{
      return !gpioStatus;
1a001b6a:	fab0 f080 	clz	r0, r0
1a001b6e:	0940      	lsrs	r0, r0, #5
   }
}
1a001b70:	bd10      	pop	{r4, pc}

1a001b72 <buttonIsDown>:

// Return true if button is down
bool_t buttonIsDown( button_t* button )
{
1a001b72:	b508      	push	{r3, lr}
   return !buttonIsUp( button );
1a001b74:	f7ff fff0 	bl	1a001b58 <buttonIsUp>
}
1a001b78:	fab0 f080 	clz	r0, r0
1a001b7c:	0940      	lsrs	r0, r0, #5
1a001b7e:	bd08      	pop	{r3, pc}

1a001b80 <buttonInitState>:

/*=====[Private functions definitions]=======================================*/

static buttonFsmState_t buttonInitState( button_t* button )
{
1a001b80:	b508      	push	{r3, lr}
   if( buttonIsDown(button) ){
1a001b82:	f7ff fff6 	bl	1a001b72 <buttonIsDown>
1a001b86:	b108      	cbz	r0, 1a001b8c <buttonInitState+0xc>
      return BUTTON_DOWN;
1a001b88:	2001      	movs	r0, #1
   }else{
      return BUTTON_UP;
   }
1a001b8a:	bd08      	pop	{r3, pc}
      return BUTTON_UP;
1a001b8c:	2000      	movs	r0, #0
1a001b8e:	e7fc      	b.n	1a001b8a <buttonInitState+0xa>

1a001b90 <buttonFsmInit>:
{
1a001b90:	b510      	push	{r4, lr}
1a001b92:	4604      	mov	r4, r0
   button->state = buttonInitState( button );
1a001b94:	f7ff fff4 	bl	1a001b80 <buttonInitState>
1a001b98:	7420      	strb	r0, [r4, #16]
   button->timeInSate = 0;
1a001b9a:	2200      	movs	r2, #0
1a001b9c:	2300      	movs	r3, #0
1a001b9e:	e9c4 2306 	strd	r2, r3, [r4, #24]
   button->flagUp = FALSE;
1a001ba2:	2300      	movs	r3, #0
1a001ba4:	7463      	strb	r3, [r4, #17]
   button->flagDown = FALSE;
1a001ba6:	74a3      	strb	r3, [r4, #18]
   button->flagFalling = FALSE;
1a001ba8:	74e3      	strb	r3, [r4, #19]
   button->flagRising = FALSE;
1a001baa:	7523      	strb	r3, [r4, #20]
}
1a001bac:	bd10      	pop	{r4, pc}

1a001bae <buttonInit>:
{
1a001bae:	b510      	push	{r4, lr}
1a001bb0:	4604      	mov	r4, r0
   button->gpio = gpio;
1a001bb2:	6001      	str	r1, [r0, #0]
   button->logic = logic;
1a001bb4:	7102      	strb	r2, [r0, #4]
   button->refreshTime = refreshTime;
1a001bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001bba:	e9c0 2302 	strd	r2, r3, [r0, #8]
   buttonFsmInit( button );
1a001bbe:	f7ff ffe7 	bl	1a001b90 <buttonFsmInit>
   button->event = BUTTON_NO_EVENT;
1a001bc2:	2200      	movs	r2, #0
1a001bc4:	2300      	movs	r3, #0
1a001bc6:	e9c4 2308 	strd	r2, r3, [r4, #32]
   button->checkPressedEvent = checkPressedEvent;
1a001bca:	f89d 3010 	ldrb.w	r3, [sp, #16]
1a001bce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   button->checkReleasedEvent = checkReleasedEvent;
1a001bd2:	f89d 3014 	ldrb.w	r3, [sp, #20]
1a001bd6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   button->checkHoldPressedEvent = checkHoldPressedEvent;
1a001bda:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001bde:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
   button->holdPressedTime = holdPressedTime;
1a001be2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a001be6:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   button->pressedCallback = pressedCallback;
1a001bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a001bec:	63a3      	str	r3, [r4, #56]	; 0x38
   button->releasedCallback = releasedCallback;
1a001bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a001bf0:	63e3      	str	r3, [r4, #60]	; 0x3c
   button->holdPressedCallback = holdPressedCallback;
1a001bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001bf4:	6423      	str	r3, [r4, #64]	; 0x40
}
1a001bf6:	bd10      	pop	{r4, pc}

1a001bf8 <buttonFsmUpdate>:
{   
1a001bf8:	b510      	push	{r4, lr}
1a001bfa:	4604      	mov	r4, r0
   button->timeInSate += button->refreshTime;
1a001bfc:	6881      	ldr	r1, [r0, #8]
1a001bfe:	68c0      	ldr	r0, [r0, #12]
1a001c00:	69a3      	ldr	r3, [r4, #24]
1a001c02:	69e2      	ldr	r2, [r4, #28]
1a001c04:	185b      	adds	r3, r3, r1
1a001c06:	eb40 0202 	adc.w	r2, r0, r2
1a001c0a:	61a3      	str	r3, [r4, #24]
1a001c0c:	61e2      	str	r2, [r4, #28]
   switch( button->state ){
1a001c0e:	7c23      	ldrb	r3, [r4, #16]
1a001c10:	2b03      	cmp	r3, #3
1a001c12:	d850      	bhi.n	1a001cb6 <buttonFsmUpdate+0xbe>
1a001c14:	e8df f003 	tbb	[pc, r3]
1a001c18:	72501f02 	.word	0x72501f02
         if( button->flagUp == FALSE ){
1a001c1c:	7c63      	ldrb	r3, [r4, #17]
1a001c1e:	b92b      	cbnz	r3, 1a001c2c <buttonFsmUpdate+0x34>
            button->flagUp = TRUE;
1a001c20:	2301      	movs	r3, #1
1a001c22:	7463      	strb	r3, [r4, #17]
            button->event = BUTTON_NO_EVENT;
1a001c24:	2200      	movs	r2, #0
1a001c26:	2300      	movs	r3, #0
1a001c28:	e9c4 2308 	strd	r2, r3, [r4, #32]
         if( buttonIsDown(button) ){
1a001c2c:	4620      	mov	r0, r4
1a001c2e:	f7ff ffa0 	bl	1a001b72 <buttonIsDown>
1a001c32:	b128      	cbz	r0, 1a001c40 <buttonFsmUpdate+0x48>
            button->state = BUTTON_FALLING;
1a001c34:	2302      	movs	r3, #2
1a001c36:	7423      	strb	r3, [r4, #16]
            button->timeInSate = 0;
1a001c38:	2200      	movs	r2, #0
1a001c3a:	2300      	movs	r3, #0
1a001c3c:	e9c4 2306 	strd	r2, r3, [r4, #24]
         if( button->state != BUTTON_UP ){
1a001c40:	7c23      	ldrb	r3, [r4, #16]
1a001c42:	b3c3      	cbz	r3, 1a001cb6 <buttonFsmUpdate+0xbe>
            button->flagUp = FALSE;
1a001c44:	2300      	movs	r3, #0
1a001c46:	7463      	strb	r3, [r4, #17]
            button->timeInSate = 0;
1a001c48:	2200      	movs	r2, #0
1a001c4a:	2300      	movs	r3, #0
1a001c4c:	e9c4 2306 	strd	r2, r3, [r4, #24]
            button->event = BUTTON_NO_EVENT;
1a001c50:	e9c4 2308 	strd	r2, r3, [r4, #32]
1a001c54:	e02f      	b.n	1a001cb6 <buttonFsmUpdate+0xbe>
         if( button->flagDown == FALSE ){
1a001c56:	7ca3      	ldrb	r3, [r4, #18]
1a001c58:	b92b      	cbnz	r3, 1a001c66 <buttonFsmUpdate+0x6e>
            button->flagDown = TRUE;
1a001c5a:	2301      	movs	r3, #1
1a001c5c:	74a3      	strb	r3, [r4, #18]
            button->event = BUTTON_NO_EVENT;
1a001c5e:	2200      	movs	r2, #0
1a001c60:	2300      	movs	r3, #0
1a001c62:	e9c4 2308 	strd	r2, r3, [r4, #32]
         if( buttonIsUp(button) ){
1a001c66:	4620      	mov	r0, r4
1a001c68:	f7ff ff76 	bl	1a001b58 <buttonIsUp>
1a001c6c:	b108      	cbz	r0, 1a001c72 <buttonFsmUpdate+0x7a>
            button->state = BUTTON_RISING;
1a001c6e:	2303      	movs	r3, #3
1a001c70:	7423      	strb	r3, [r4, #16]
         if( (button->checkHoldPressedEvent) && 
1a001c72:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
1a001c76:	b19b      	cbz	r3, 1a001ca0 <buttonFsmUpdate+0xa8>
             (button->timeInSate >= button->holdPressedTime) ){
1a001c78:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
1a001c7c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
         if( (button->checkHoldPressedEvent) && 
1a001c80:	4299      	cmp	r1, r3
1a001c82:	bf08      	it	eq
1a001c84:	4290      	cmpeq	r0, r2
1a001c86:	d30b      	bcc.n	1a001ca0 <buttonFsmUpdate+0xa8>
            if( button->event == BUTTON_NO_EVENT ){   
1a001c88:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
1a001c8c:	4313      	orrs	r3, r2
1a001c8e:	d107      	bne.n	1a001ca0 <buttonFsmUpdate+0xa8>
               button->event = BUTTON_HOLD_PRESED;           
1a001c90:	2203      	movs	r2, #3
1a001c92:	2300      	movs	r3, #0
1a001c94:	e9c4 2308 	strd	r2, r3, [r4, #32]
               if( (button->holdPressedCallback != NULL) ){
1a001c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001c9a:	b10b      	cbz	r3, 1a001ca0 <buttonFsmUpdate+0xa8>
                  (*(button->holdPressedCallback))( 0 );
1a001c9c:	2000      	movs	r0, #0
1a001c9e:	4798      	blx	r3
         if( button->state != BUTTON_DOWN ){
1a001ca0:	7c23      	ldrb	r3, [r4, #16]
1a001ca2:	2b01      	cmp	r3, #1
1a001ca4:	d007      	beq.n	1a001cb6 <buttonFsmUpdate+0xbe>
            button->flagDown = FALSE;
1a001ca6:	2300      	movs	r3, #0
1a001ca8:	74a3      	strb	r3, [r4, #18]
            button->timeInSate = 0;
1a001caa:	2200      	movs	r2, #0
1a001cac:	2300      	movs	r3, #0
1a001cae:	e9c4 2306 	strd	r2, r3, [r4, #24]
            button->event = BUTTON_NO_EVENT;
1a001cb2:	e9c4 2308 	strd	r2, r3, [r4, #32]
}
1a001cb6:	bd10      	pop	{r4, pc}
         if( button->flagFalling == FALSE ){
1a001cb8:	7ce3      	ldrb	r3, [r4, #19]
1a001cba:	b90b      	cbnz	r3, 1a001cc0 <buttonFsmUpdate+0xc8>
            button->flagFalling = TRUE;
1a001cbc:	2301      	movs	r3, #1
1a001cbe:	74e3      	strb	r3, [r4, #19]
         if( buttonIsDown(button) ){
1a001cc0:	4620      	mov	r0, r4
1a001cc2:	f7ff ff56 	bl	1a001b72 <buttonIsDown>
1a001cc6:	b168      	cbz	r0, 1a001ce4 <buttonFsmUpdate+0xec>
            button->state = BUTTON_DOWN;
1a001cc8:	2301      	movs	r3, #1
1a001cca:	7423      	strb	r3, [r4, #16]
            if( (button->checkPressedEvent) ){
1a001ccc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
1a001cd0:	b153      	cbz	r3, 1a001ce8 <buttonFsmUpdate+0xf0>
               button->event = BUTTON_PRESSED;
1a001cd2:	2201      	movs	r2, #1
1a001cd4:	2300      	movs	r3, #0
1a001cd6:	e9c4 2308 	strd	r2, r3, [r4, #32]
               if( (button->pressedCallback != NULL) ){
1a001cda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001cdc:	b123      	cbz	r3, 1a001ce8 <buttonFsmUpdate+0xf0>
                  (*(button->pressedCallback))( 0 );
1a001cde:	2000      	movs	r0, #0
1a001ce0:	4798      	blx	r3
1a001ce2:	e001      	b.n	1a001ce8 <buttonFsmUpdate+0xf0>
            button->state = BUTTON_UP;
1a001ce4:	2300      	movs	r3, #0
1a001ce6:	7423      	strb	r3, [r4, #16]
         if( button->state != BUTTON_FALLING ){
1a001ce8:	7c23      	ldrb	r3, [r4, #16]
1a001cea:	2b02      	cmp	r3, #2
1a001cec:	d0e3      	beq.n	1a001cb6 <buttonFsmUpdate+0xbe>
            button->flagFalling = FALSE;
1a001cee:	2300      	movs	r3, #0
1a001cf0:	74e3      	strb	r3, [r4, #19]
            button->timeInSate = 0;
1a001cf2:	2200      	movs	r2, #0
1a001cf4:	2300      	movs	r3, #0
1a001cf6:	e9c4 2306 	strd	r2, r3, [r4, #24]
1a001cfa:	e7dc      	b.n	1a001cb6 <buttonFsmUpdate+0xbe>
         if( button->flagRising == FALSE ){
1a001cfc:	7d23      	ldrb	r3, [r4, #20]
1a001cfe:	b90b      	cbnz	r3, 1a001d04 <buttonFsmUpdate+0x10c>
            button->flagRising = TRUE;
1a001d00:	2301      	movs	r3, #1
1a001d02:	7523      	strb	r3, [r4, #20]
         if( buttonIsUp(button) ){
1a001d04:	4620      	mov	r0, r4
1a001d06:	f7ff ff27 	bl	1a001b58 <buttonIsUp>
1a001d0a:	b168      	cbz	r0, 1a001d28 <buttonFsmUpdate+0x130>
            button->state = BUTTON_UP;
1a001d0c:	2300      	movs	r3, #0
1a001d0e:	7423      	strb	r3, [r4, #16]
            if( (button->checkReleasedEvent) ){
1a001d10:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
1a001d14:	b153      	cbz	r3, 1a001d2c <buttonFsmUpdate+0x134>
               button->event = BUTTON_RELEASED;
1a001d16:	2202      	movs	r2, #2
1a001d18:	2300      	movs	r3, #0
1a001d1a:	e9c4 2308 	strd	r2, r3, [r4, #32]
               if( (button->releasedCallback != NULL) ){
1a001d1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001d20:	b123      	cbz	r3, 1a001d2c <buttonFsmUpdate+0x134>
                  (*(button->releasedCallback))( 0 );
1a001d22:	2000      	movs	r0, #0
1a001d24:	4798      	blx	r3
1a001d26:	e001      	b.n	1a001d2c <buttonFsmUpdate+0x134>
            button->state = BUTTON_DOWN;
1a001d28:	2301      	movs	r3, #1
1a001d2a:	7423      	strb	r3, [r4, #16]
         if( button->state != BUTTON_RISING ){
1a001d2c:	7c23      	ldrb	r3, [r4, #16]
1a001d2e:	2b03      	cmp	r3, #3
1a001d30:	d0c1      	beq.n	1a001cb6 <buttonFsmUpdate+0xbe>
            button->flagRising = FALSE;
1a001d32:	2300      	movs	r3, #0
1a001d34:	7523      	strb	r3, [r4, #20]
            button->timeInSate = 0;
1a001d36:	2200      	movs	r2, #0
1a001d38:	2300      	movs	r3, #0
1a001d3a:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
1a001d3e:	e7ba      	b.n	1a001cb6 <buttonFsmUpdate+0xbe>

1a001d40 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001d40:	b510      	push	{r4, lr}
1a001d42:	4604      	mov	r4, r0
1a001d44:	4610      	mov	r0, r2
1a001d46:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001d48:	4b04      	ldr	r3, [pc, #16]	; (1a001d5c <delayInit+0x1c>)
1a001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001d4e:	f000 f827 	bl	1a001da0 <__aeabi_uldivmod>
1a001d52:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001d56:	2300      	movs	r3, #0
1a001d58:	7423      	strb	r3, [r4, #16]
}
1a001d5a:	bd10      	pop	{r4, pc}
1a001d5c:	10000040 	.word	0x10000040

1a001d60 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001d62:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001d64:	7c05      	ldrb	r5, [r0, #16]
1a001d66:	b93d      	cbnz	r5, 1a001d78 <delayRead+0x18>
      delay->startTime = tickRead();
1a001d68:	f7ff fce6 	bl	1a001738 <tickRead>
1a001d6c:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a001d70:	2301      	movs	r3, #1
1a001d72:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a001d74:	4628      	mov	r0, r5
1a001d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001d78:	f7ff fcde 	bl	1a001738 <tickRead>
1a001d7c:	6823      	ldr	r3, [r4, #0]
1a001d7e:	6862      	ldr	r2, [r4, #4]
1a001d80:	1ac6      	subs	r6, r0, r3
1a001d82:	eb61 0702 	sbc.w	r7, r1, r2
1a001d86:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001d8a:	429f      	cmp	r7, r3
1a001d8c:	bf08      	it	eq
1a001d8e:	4296      	cmpeq	r6, r2
1a001d90:	d303      	bcc.n	1a001d9a <delayRead+0x3a>
         delay->running = 0;
1a001d92:	2300      	movs	r3, #0
1a001d94:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001d96:	2501      	movs	r5, #1
1a001d98:	e7ec      	b.n	1a001d74 <delayRead+0x14>
   bool_t timeArrived = 0;
1a001d9a:	2500      	movs	r5, #0
1a001d9c:	e7ea      	b.n	1a001d74 <delayRead+0x14>
1a001d9e:	Address 0x000000001a001d9e is out of bounds.


1a001da0 <__aeabi_uldivmod>:
1a001da0:	b953      	cbnz	r3, 1a001db8 <__aeabi_uldivmod+0x18>
1a001da2:	b94a      	cbnz	r2, 1a001db8 <__aeabi_uldivmod+0x18>
1a001da4:	2900      	cmp	r1, #0
1a001da6:	bf08      	it	eq
1a001da8:	2800      	cmpeq	r0, #0
1a001daa:	bf1c      	itt	ne
1a001dac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001db0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001db4:	f000 b974 	b.w	1a0020a0 <__aeabi_idiv0>
1a001db8:	f1ad 0c08 	sub.w	ip, sp, #8
1a001dbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001dc0:	f000 f806 	bl	1a001dd0 <__udivmoddi4>
1a001dc4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001dcc:	b004      	add	sp, #16
1a001dce:	4770      	bx	lr

1a001dd0 <__udivmoddi4>:
1a001dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001dd4:	9e08      	ldr	r6, [sp, #32]
1a001dd6:	4604      	mov	r4, r0
1a001dd8:	4688      	mov	r8, r1
1a001dda:	2b00      	cmp	r3, #0
1a001ddc:	f040 8085 	bne.w	1a001eea <__udivmoddi4+0x11a>
1a001de0:	428a      	cmp	r2, r1
1a001de2:	4615      	mov	r5, r2
1a001de4:	d948      	bls.n	1a001e78 <__udivmoddi4+0xa8>
1a001de6:	fab2 f282 	clz	r2, r2
1a001dea:	b14a      	cbz	r2, 1a001e00 <__udivmoddi4+0x30>
1a001dec:	f1c2 0720 	rsb	r7, r2, #32
1a001df0:	fa01 f302 	lsl.w	r3, r1, r2
1a001df4:	fa20 f707 	lsr.w	r7, r0, r7
1a001df8:	4095      	lsls	r5, r2
1a001dfa:	ea47 0803 	orr.w	r8, r7, r3
1a001dfe:	4094      	lsls	r4, r2
1a001e00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e04:	0c23      	lsrs	r3, r4, #16
1a001e06:	fbb8 f7fe 	udiv	r7, r8, lr
1a001e0a:	fa1f fc85 	uxth.w	ip, r5
1a001e0e:	fb0e 8817 	mls	r8, lr, r7, r8
1a001e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001e16:	fb07 f10c 	mul.w	r1, r7, ip
1a001e1a:	4299      	cmp	r1, r3
1a001e1c:	d909      	bls.n	1a001e32 <__udivmoddi4+0x62>
1a001e1e:	18eb      	adds	r3, r5, r3
1a001e20:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001e24:	f080 80e3 	bcs.w	1a001fee <__udivmoddi4+0x21e>
1a001e28:	4299      	cmp	r1, r3
1a001e2a:	f240 80e0 	bls.w	1a001fee <__udivmoddi4+0x21e>
1a001e2e:	3f02      	subs	r7, #2
1a001e30:	442b      	add	r3, r5
1a001e32:	1a5b      	subs	r3, r3, r1
1a001e34:	b2a4      	uxth	r4, r4
1a001e36:	fbb3 f0fe 	udiv	r0, r3, lr
1a001e3a:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e3e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e42:	fb00 fc0c 	mul.w	ip, r0, ip
1a001e46:	45a4      	cmp	ip, r4
1a001e48:	d909      	bls.n	1a001e5e <__udivmoddi4+0x8e>
1a001e4a:	192c      	adds	r4, r5, r4
1a001e4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001e50:	f080 80cb 	bcs.w	1a001fea <__udivmoddi4+0x21a>
1a001e54:	45a4      	cmp	ip, r4
1a001e56:	f240 80c8 	bls.w	1a001fea <__udivmoddi4+0x21a>
1a001e5a:	3802      	subs	r0, #2
1a001e5c:	442c      	add	r4, r5
1a001e5e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001e62:	eba4 040c 	sub.w	r4, r4, ip
1a001e66:	2700      	movs	r7, #0
1a001e68:	b11e      	cbz	r6, 1a001e72 <__udivmoddi4+0xa2>
1a001e6a:	40d4      	lsrs	r4, r2
1a001e6c:	2300      	movs	r3, #0
1a001e6e:	e9c6 4300 	strd	r4, r3, [r6]
1a001e72:	4639      	mov	r1, r7
1a001e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e78:	2a00      	cmp	r2, #0
1a001e7a:	d053      	beq.n	1a001f24 <__udivmoddi4+0x154>
1a001e7c:	fab2 f282 	clz	r2, r2
1a001e80:	2a00      	cmp	r2, #0
1a001e82:	f040 80b6 	bne.w	1a001ff2 <__udivmoddi4+0x222>
1a001e86:	1b49      	subs	r1, r1, r5
1a001e88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e8c:	fa1f f885 	uxth.w	r8, r5
1a001e90:	2701      	movs	r7, #1
1a001e92:	fbb1 fcfe 	udiv	ip, r1, lr
1a001e96:	0c23      	lsrs	r3, r4, #16
1a001e98:	fb0e 111c 	mls	r1, lr, ip, r1
1a001e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001ea0:	fb08 f10c 	mul.w	r1, r8, ip
1a001ea4:	4299      	cmp	r1, r3
1a001ea6:	d907      	bls.n	1a001eb8 <__udivmoddi4+0xe8>
1a001ea8:	18eb      	adds	r3, r5, r3
1a001eaa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001eae:	d202      	bcs.n	1a001eb6 <__udivmoddi4+0xe6>
1a001eb0:	4299      	cmp	r1, r3
1a001eb2:	f200 80ec 	bhi.w	1a00208e <__udivmoddi4+0x2be>
1a001eb6:	4684      	mov	ip, r0
1a001eb8:	1a59      	subs	r1, r3, r1
1a001eba:	b2a3      	uxth	r3, r4
1a001ebc:	fbb1 f0fe 	udiv	r0, r1, lr
1a001ec0:	fb0e 1410 	mls	r4, lr, r0, r1
1a001ec4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001ec8:	fb08 f800 	mul.w	r8, r8, r0
1a001ecc:	45a0      	cmp	r8, r4
1a001ece:	d907      	bls.n	1a001ee0 <__udivmoddi4+0x110>
1a001ed0:	192c      	adds	r4, r5, r4
1a001ed2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001ed6:	d202      	bcs.n	1a001ede <__udivmoddi4+0x10e>
1a001ed8:	45a0      	cmp	r8, r4
1a001eda:	f200 80dc 	bhi.w	1a002096 <__udivmoddi4+0x2c6>
1a001ede:	4618      	mov	r0, r3
1a001ee0:	eba4 0408 	sub.w	r4, r4, r8
1a001ee4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001ee8:	e7be      	b.n	1a001e68 <__udivmoddi4+0x98>
1a001eea:	428b      	cmp	r3, r1
1a001eec:	d908      	bls.n	1a001f00 <__udivmoddi4+0x130>
1a001eee:	2e00      	cmp	r6, #0
1a001ef0:	d078      	beq.n	1a001fe4 <__udivmoddi4+0x214>
1a001ef2:	2700      	movs	r7, #0
1a001ef4:	e9c6 0100 	strd	r0, r1, [r6]
1a001ef8:	4638      	mov	r0, r7
1a001efa:	4639      	mov	r1, r7
1a001efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f00:	fab3 f783 	clz	r7, r3
1a001f04:	b97f      	cbnz	r7, 1a001f26 <__udivmoddi4+0x156>
1a001f06:	428b      	cmp	r3, r1
1a001f08:	d302      	bcc.n	1a001f10 <__udivmoddi4+0x140>
1a001f0a:	4282      	cmp	r2, r0
1a001f0c:	f200 80bd 	bhi.w	1a00208a <__udivmoddi4+0x2ba>
1a001f10:	1a84      	subs	r4, r0, r2
1a001f12:	eb61 0303 	sbc.w	r3, r1, r3
1a001f16:	2001      	movs	r0, #1
1a001f18:	4698      	mov	r8, r3
1a001f1a:	2e00      	cmp	r6, #0
1a001f1c:	d0a9      	beq.n	1a001e72 <__udivmoddi4+0xa2>
1a001f1e:	e9c6 4800 	strd	r4, r8, [r6]
1a001f22:	e7a6      	b.n	1a001e72 <__udivmoddi4+0xa2>
1a001f24:	deff      	udf	#255	; 0xff
1a001f26:	f1c7 0520 	rsb	r5, r7, #32
1a001f2a:	40bb      	lsls	r3, r7
1a001f2c:	fa22 fc05 	lsr.w	ip, r2, r5
1a001f30:	ea4c 0c03 	orr.w	ip, ip, r3
1a001f34:	fa01 f407 	lsl.w	r4, r1, r7
1a001f38:	fa20 f805 	lsr.w	r8, r0, r5
1a001f3c:	fa21 f305 	lsr.w	r3, r1, r5
1a001f40:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001f44:	ea48 0404 	orr.w	r4, r8, r4
1a001f48:	fbb3 f9fe 	udiv	r9, r3, lr
1a001f4c:	0c21      	lsrs	r1, r4, #16
1a001f4e:	fb0e 3319 	mls	r3, lr, r9, r3
1a001f52:	fa1f f88c 	uxth.w	r8, ip
1a001f56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001f5a:	fb09 fa08 	mul.w	sl, r9, r8
1a001f5e:	459a      	cmp	sl, r3
1a001f60:	fa02 f207 	lsl.w	r2, r2, r7
1a001f64:	fa00 f107 	lsl.w	r1, r0, r7
1a001f68:	d90b      	bls.n	1a001f82 <__udivmoddi4+0x1b2>
1a001f6a:	eb1c 0303 	adds.w	r3, ip, r3
1a001f6e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001f72:	f080 8088 	bcs.w	1a002086 <__udivmoddi4+0x2b6>
1a001f76:	459a      	cmp	sl, r3
1a001f78:	f240 8085 	bls.w	1a002086 <__udivmoddi4+0x2b6>
1a001f7c:	f1a9 0902 	sub.w	r9, r9, #2
1a001f80:	4463      	add	r3, ip
1a001f82:	eba3 030a 	sub.w	r3, r3, sl
1a001f86:	b2a4      	uxth	r4, r4
1a001f88:	fbb3 f0fe 	udiv	r0, r3, lr
1a001f8c:	fb0e 3310 	mls	r3, lr, r0, r3
1a001f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001f94:	fb00 f808 	mul.w	r8, r0, r8
1a001f98:	45a0      	cmp	r8, r4
1a001f9a:	d908      	bls.n	1a001fae <__udivmoddi4+0x1de>
1a001f9c:	eb1c 0404 	adds.w	r4, ip, r4
1a001fa0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001fa4:	d26b      	bcs.n	1a00207e <__udivmoddi4+0x2ae>
1a001fa6:	45a0      	cmp	r8, r4
1a001fa8:	d969      	bls.n	1a00207e <__udivmoddi4+0x2ae>
1a001faa:	3802      	subs	r0, #2
1a001fac:	4464      	add	r4, ip
1a001fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001fb2:	eba4 0408 	sub.w	r4, r4, r8
1a001fb6:	fba0 8902 	umull	r8, r9, r0, r2
1a001fba:	454c      	cmp	r4, r9
1a001fbc:	46c6      	mov	lr, r8
1a001fbe:	464b      	mov	r3, r9
1a001fc0:	d354      	bcc.n	1a00206c <__udivmoddi4+0x29c>
1a001fc2:	d051      	beq.n	1a002068 <__udivmoddi4+0x298>
1a001fc4:	2e00      	cmp	r6, #0
1a001fc6:	d069      	beq.n	1a00209c <__udivmoddi4+0x2cc>
1a001fc8:	ebb1 020e 	subs.w	r2, r1, lr
1a001fcc:	eb64 0403 	sbc.w	r4, r4, r3
1a001fd0:	fa04 f505 	lsl.w	r5, r4, r5
1a001fd4:	fa22 f307 	lsr.w	r3, r2, r7
1a001fd8:	40fc      	lsrs	r4, r7
1a001fda:	431d      	orrs	r5, r3
1a001fdc:	e9c6 5400 	strd	r5, r4, [r6]
1a001fe0:	2700      	movs	r7, #0
1a001fe2:	e746      	b.n	1a001e72 <__udivmoddi4+0xa2>
1a001fe4:	4637      	mov	r7, r6
1a001fe6:	4630      	mov	r0, r6
1a001fe8:	e743      	b.n	1a001e72 <__udivmoddi4+0xa2>
1a001fea:	4618      	mov	r0, r3
1a001fec:	e737      	b.n	1a001e5e <__udivmoddi4+0x8e>
1a001fee:	4607      	mov	r7, r0
1a001ff0:	e71f      	b.n	1a001e32 <__udivmoddi4+0x62>
1a001ff2:	f1c2 0320 	rsb	r3, r2, #32
1a001ff6:	fa20 f703 	lsr.w	r7, r0, r3
1a001ffa:	4095      	lsls	r5, r2
1a001ffc:	fa01 f002 	lsl.w	r0, r1, r2
1a002000:	fa21 f303 	lsr.w	r3, r1, r3
1a002004:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002008:	4338      	orrs	r0, r7
1a00200a:	0c01      	lsrs	r1, r0, #16
1a00200c:	fbb3 f7fe 	udiv	r7, r3, lr
1a002010:	fa1f f885 	uxth.w	r8, r5
1a002014:	fb0e 3317 	mls	r3, lr, r7, r3
1a002018:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00201c:	fb07 f308 	mul.w	r3, r7, r8
1a002020:	428b      	cmp	r3, r1
1a002022:	fa04 f402 	lsl.w	r4, r4, r2
1a002026:	d907      	bls.n	1a002038 <__udivmoddi4+0x268>
1a002028:	1869      	adds	r1, r5, r1
1a00202a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00202e:	d228      	bcs.n	1a002082 <__udivmoddi4+0x2b2>
1a002030:	428b      	cmp	r3, r1
1a002032:	d926      	bls.n	1a002082 <__udivmoddi4+0x2b2>
1a002034:	3f02      	subs	r7, #2
1a002036:	4429      	add	r1, r5
1a002038:	1acb      	subs	r3, r1, r3
1a00203a:	b281      	uxth	r1, r0
1a00203c:	fbb3 f0fe 	udiv	r0, r3, lr
1a002040:	fb0e 3310 	mls	r3, lr, r0, r3
1a002044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002048:	fb00 f308 	mul.w	r3, r0, r8
1a00204c:	428b      	cmp	r3, r1
1a00204e:	d907      	bls.n	1a002060 <__udivmoddi4+0x290>
1a002050:	1869      	adds	r1, r5, r1
1a002052:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002056:	d210      	bcs.n	1a00207a <__udivmoddi4+0x2aa>
1a002058:	428b      	cmp	r3, r1
1a00205a:	d90e      	bls.n	1a00207a <__udivmoddi4+0x2aa>
1a00205c:	3802      	subs	r0, #2
1a00205e:	4429      	add	r1, r5
1a002060:	1ac9      	subs	r1, r1, r3
1a002062:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002066:	e714      	b.n	1a001e92 <__udivmoddi4+0xc2>
1a002068:	4541      	cmp	r1, r8
1a00206a:	d2ab      	bcs.n	1a001fc4 <__udivmoddi4+0x1f4>
1a00206c:	ebb8 0e02 	subs.w	lr, r8, r2
1a002070:	eb69 020c 	sbc.w	r2, r9, ip
1a002074:	3801      	subs	r0, #1
1a002076:	4613      	mov	r3, r2
1a002078:	e7a4      	b.n	1a001fc4 <__udivmoddi4+0x1f4>
1a00207a:	4660      	mov	r0, ip
1a00207c:	e7f0      	b.n	1a002060 <__udivmoddi4+0x290>
1a00207e:	4618      	mov	r0, r3
1a002080:	e795      	b.n	1a001fae <__udivmoddi4+0x1de>
1a002082:	4667      	mov	r7, ip
1a002084:	e7d8      	b.n	1a002038 <__udivmoddi4+0x268>
1a002086:	4681      	mov	r9, r0
1a002088:	e77b      	b.n	1a001f82 <__udivmoddi4+0x1b2>
1a00208a:	4638      	mov	r0, r7
1a00208c:	e745      	b.n	1a001f1a <__udivmoddi4+0x14a>
1a00208e:	f1ac 0c02 	sub.w	ip, ip, #2
1a002092:	442b      	add	r3, r5
1a002094:	e710      	b.n	1a001eb8 <__udivmoddi4+0xe8>
1a002096:	3802      	subs	r0, #2
1a002098:	442c      	add	r4, r5
1a00209a:	e721      	b.n	1a001ee0 <__udivmoddi4+0x110>
1a00209c:	4637      	mov	r7, r6
1a00209e:	e6e8      	b.n	1a001e72 <__udivmoddi4+0xa2>

1a0020a0 <__aeabi_idiv0>:
1a0020a0:	4770      	bx	lr
1a0020a2:	bf00      	nop

1a0020a4 <__libc_init_array>:
1a0020a4:	b570      	push	{r4, r5, r6, lr}
1a0020a6:	4e0d      	ldr	r6, [pc, #52]	; (1a0020dc <__libc_init_array+0x38>)
1a0020a8:	4d0d      	ldr	r5, [pc, #52]	; (1a0020e0 <__libc_init_array+0x3c>)
1a0020aa:	1b76      	subs	r6, r6, r5
1a0020ac:	10b6      	asrs	r6, r6, #2
1a0020ae:	d006      	beq.n	1a0020be <__libc_init_array+0x1a>
1a0020b0:	2400      	movs	r4, #0
1a0020b2:	3401      	adds	r4, #1
1a0020b4:	f855 3b04 	ldr.w	r3, [r5], #4
1a0020b8:	4798      	blx	r3
1a0020ba:	42a6      	cmp	r6, r4
1a0020bc:	d1f9      	bne.n	1a0020b2 <__libc_init_array+0xe>
1a0020be:	4e09      	ldr	r6, [pc, #36]	; (1a0020e4 <__libc_init_array+0x40>)
1a0020c0:	4d09      	ldr	r5, [pc, #36]	; (1a0020e8 <__libc_init_array+0x44>)
1a0020c2:	1b76      	subs	r6, r6, r5
1a0020c4:	f7fe fc2b 	bl	1a00091e <_init>
1a0020c8:	10b6      	asrs	r6, r6, #2
1a0020ca:	d006      	beq.n	1a0020da <__libc_init_array+0x36>
1a0020cc:	2400      	movs	r4, #0
1a0020ce:	3401      	adds	r4, #1
1a0020d0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0020d4:	4798      	blx	r3
1a0020d6:	42a6      	cmp	r6, r4
1a0020d8:	d1f9      	bne.n	1a0020ce <__libc_init_array+0x2a>
1a0020da:	bd70      	pop	{r4, r5, r6, pc}
1a0020dc:	1a002828 	.word	0x1a002828
1a0020e0:	1a002828 	.word	0x1a002828
1a0020e4:	1a00282c 	.word	0x1a00282c
1a0020e8:	1a002828 	.word	0x1a002828

1a0020ec <memset>:
1a0020ec:	b4f0      	push	{r4, r5, r6, r7}
1a0020ee:	0786      	lsls	r6, r0, #30
1a0020f0:	d046      	beq.n	1a002180 <memset+0x94>
1a0020f2:	1e54      	subs	r4, r2, #1
1a0020f4:	2a00      	cmp	r2, #0
1a0020f6:	d03c      	beq.n	1a002172 <memset+0x86>
1a0020f8:	b2ca      	uxtb	r2, r1
1a0020fa:	4603      	mov	r3, r0
1a0020fc:	e002      	b.n	1a002104 <memset+0x18>
1a0020fe:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a002102:	d336      	bcc.n	1a002172 <memset+0x86>
1a002104:	f803 2b01 	strb.w	r2, [r3], #1
1a002108:	079d      	lsls	r5, r3, #30
1a00210a:	d1f8      	bne.n	1a0020fe <memset+0x12>
1a00210c:	2c03      	cmp	r4, #3
1a00210e:	d929      	bls.n	1a002164 <memset+0x78>
1a002110:	b2cd      	uxtb	r5, r1
1a002112:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a002116:	2c0f      	cmp	r4, #15
1a002118:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a00211c:	d933      	bls.n	1a002186 <memset+0x9a>
1a00211e:	f1a4 0610 	sub.w	r6, r4, #16
1a002122:	0936      	lsrs	r6, r6, #4
1a002124:	f103 0720 	add.w	r7, r3, #32
1a002128:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a00212c:	f103 0210 	add.w	r2, r3, #16
1a002130:	e942 5504 	strd	r5, r5, [r2, #-16]
1a002134:	e942 5502 	strd	r5, r5, [r2, #-8]
1a002138:	3210      	adds	r2, #16
1a00213a:	42ba      	cmp	r2, r7
1a00213c:	d1f8      	bne.n	1a002130 <memset+0x44>
1a00213e:	1c72      	adds	r2, r6, #1
1a002140:	f014 0f0c 	tst.w	r4, #12
1a002144:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a002148:	f004 060f 	and.w	r6, r4, #15
1a00214c:	d013      	beq.n	1a002176 <memset+0x8a>
1a00214e:	1f33      	subs	r3, r6, #4
1a002150:	f023 0303 	bic.w	r3, r3, #3
1a002154:	3304      	adds	r3, #4
1a002156:	4413      	add	r3, r2
1a002158:	f842 5b04 	str.w	r5, [r2], #4
1a00215c:	4293      	cmp	r3, r2
1a00215e:	d1fb      	bne.n	1a002158 <memset+0x6c>
1a002160:	f006 0403 	and.w	r4, r6, #3
1a002164:	b12c      	cbz	r4, 1a002172 <memset+0x86>
1a002166:	b2c9      	uxtb	r1, r1
1a002168:	441c      	add	r4, r3
1a00216a:	f803 1b01 	strb.w	r1, [r3], #1
1a00216e:	429c      	cmp	r4, r3
1a002170:	d1fb      	bne.n	1a00216a <memset+0x7e>
1a002172:	bcf0      	pop	{r4, r5, r6, r7}
1a002174:	4770      	bx	lr
1a002176:	4634      	mov	r4, r6
1a002178:	4613      	mov	r3, r2
1a00217a:	2c00      	cmp	r4, #0
1a00217c:	d1f3      	bne.n	1a002166 <memset+0x7a>
1a00217e:	e7f8      	b.n	1a002172 <memset+0x86>
1a002180:	4614      	mov	r4, r2
1a002182:	4603      	mov	r3, r0
1a002184:	e7c2      	b.n	1a00210c <memset+0x20>
1a002186:	461a      	mov	r2, r3
1a002188:	4626      	mov	r6, r4
1a00218a:	e7e0      	b.n	1a00214e <memset+0x62>
1a00218c:	656c6553 	.word	0x656c6553
1a002190:	6f696363 	.word	0x6f696363
1a002194:	6c20656e 	.word	0x6c20656e
1a002198:	706f2061 	.word	0x706f2061
1a00219c:	6e6f6963 	.word	0x6e6f6963
1a0021a0:	65757120 	.word	0x65757120
1a0021a4:	73656420 	.word	0x73656420
1a0021a8:	6d206165 	.word	0x6d206165
1a0021ac:	61696465 	.word	0x61696465
1a0021b0:	2065746e 	.word	0x2065746e
1a0021b4:	75206c65 	.word	0x75206c65
1a0021b8:	64206f73 	.word	0x64206f73
1a0021bc:	6f6c2065 	.word	0x6f6c2065
1a0021c0:	75702073 	.word	0x75702073
1a0021c4:	6461736c 	.word	0x6461736c
1a0021c8:	7365726f 	.word	0x7365726f
1a0021cc:	000a0d2e 	.word	0x000a0d2e
1a0021d0:	61432e31 	.word	0x61432e31
1a0021d4:	7262696c 	.word	0x7262696c
1a0021d8:	6f696361 	.word	0x6f696361
1a0021dc:	320a0d6e 	.word	0x320a0d6e
1a0021e0:	7469542e 	.word	0x7469542e
1a0021e4:	63616c75 	.word	0x63616c75
1a0021e8:	0d6e6f69 	.word	0x0d6e6f69
1a0021ec:	432e330a 	.word	0x432e330a
1a0021f0:	69666e6f 	.word	0x69666e6f
1a0021f4:	61727567 	.word	0x61727567
1a0021f8:	6e6f6963 	.word	0x6e6f6963
1a0021fc:	2e340a0d 	.word	0x2e340a0d
1a002200:	656e6f43 	.word	0x656e6f43
1a002204:	6e6f6978 	.word	0x6e6f6978
1a002208:	0a0a0d2e 	.word	0x0a0a0d2e
1a00220c:	00000000 	.word	0x00000000
1a002210:	656c6553 	.word	0x656c6553
1a002214:	6f696363 	.word	0x6f696363
1a002218:	6520656e 	.word	0x6520656e
1a00221c:	6170206c 	.word	0x6170206c
1a002220:	6e6f7274 	.word	0x6e6f7274
1a002224:	6e6f6320 	.word	0x6e6f6320
1a002228:	206c6520 	.word	0x206c6520
1a00222c:	6c617563 	.word	0x6c617563
1a002230:	73656420 	.word	0x73656420
1a002234:	63206165 	.word	0x63206165
1a002238:	62696c61 	.word	0x62696c61
1a00223c:	20726172 	.word	0x20726172
1a002240:	74206c65 	.word	0x74206c65
1a002244:	6c757469 	.word	0x6c757469
1a002248:	726f6461 	.word	0x726f6461
1a00224c:	0a0d2e3a 	.word	0x0a0d2e3a
1a002250:	00000000 	.word	0x00000000
1a002254:	75422e31 	.word	0x75422e31
1a002258:	72656666 	.word	0x72656666
1a00225c:	0a0d4120 	.word	0x0a0d4120
1a002260:	75422e32 	.word	0x75422e32
1a002264:	72656666 	.word	0x72656666
1a002268:	0a0d4220 	.word	0x0a0d4220
1a00226c:	75422e33 	.word	0x75422e33
1a002270:	72656666 	.word	0x72656666
1a002274:	0a0d4320 	.word	0x0a0d4320
1a002278:	65522e34 	.word	0x65522e34
1a00227c:	73657267 	.word	0x73657267
1a002280:	0d2e7261 	.word	0x0d2e7261
1a002284:	00000a0a 	.word	0x00000a0a
1a002288:	63206553 	.word	0x63206553
1a00228c:	62696c61 	.word	0x62696c61
1a002290:	65206f72 	.word	0x65206f72
1a002294:	7542206c 	.word	0x7542206c
1a002298:	72656666 	.word	0x72656666
1a00229c:	202e4120 	.word	0x202e4120
1a0022a0:	73657250 	.word	0x73657250
1a0022a4:	656e6f69 	.word	0x656e6f69
1a0022a8:	70203420 	.word	0x70203420
1a0022ac:	20617261 	.word	0x20617261
1a0022b0:	72676572 	.word	0x72676572
1a0022b4:	72617365 	.word	0x72617365
1a0022b8:	0a0a0d2e 	.word	0x0a0a0d2e
1a0022bc:	00000000 	.word	0x00000000
1a0022c0:	63206553 	.word	0x63206553
1a0022c4:	62696c61 	.word	0x62696c61
1a0022c8:	65206f72 	.word	0x65206f72
1a0022cc:	7542206c 	.word	0x7542206c
1a0022d0:	72656666 	.word	0x72656666
1a0022d4:	202e4220 	.word	0x202e4220
1a0022d8:	73657250 	.word	0x73657250
1a0022dc:	656e6f69 	.word	0x656e6f69
1a0022e0:	70203420 	.word	0x70203420
1a0022e4:	20617261 	.word	0x20617261
1a0022e8:	72676572 	.word	0x72676572
1a0022ec:	72617365 	.word	0x72617365
1a0022f0:	0a0a0d2e 	.word	0x0a0a0d2e
1a0022f4:	00000000 	.word	0x00000000
1a0022f8:	63206553 	.word	0x63206553
1a0022fc:	62696c61 	.word	0x62696c61
1a002300:	65206f72 	.word	0x65206f72
1a002304:	7542206c 	.word	0x7542206c
1a002308:	72656666 	.word	0x72656666
1a00230c:	202e4320 	.word	0x202e4320
1a002310:	73657250 	.word	0x73657250
1a002314:	656e6f69 	.word	0x656e6f69
1a002318:	70203420 	.word	0x70203420
1a00231c:	20617261 	.word	0x20617261
1a002320:	72676572 	.word	0x72676572
1a002324:	72617365 	.word	0x72617365
1a002328:	0a0a0d2e 	.word	0x0a0a0d2e
1a00232c:	00000000 	.word	0x00000000
1a002330:	65206553 	.word	0x65206553
1a002334:	20617473 	.word	0x20617473
1a002338:	6c616572 	.word	0x6c616572
1a00233c:	6e617a69 	.word	0x6e617a69
1a002340:	6c206f64 	.word	0x6c206f64
1a002344:	69742061 	.word	0x69742061
1a002348:	616c7574 	.word	0x616c7574
1a00234c:	6e6f6963 	.word	0x6e6f6963
1a002350:	7250202e 	.word	0x7250202e
1a002354:	6f697365 	.word	0x6f697365
1a002358:	3420656e 	.word	0x3420656e
1a00235c:	72617020 	.word	0x72617020
1a002360:	69662061 	.word	0x69662061
1a002364:	696c616e 	.word	0x696c616e
1a002368:	2072617a 	.word	0x2072617a
1a00236c:	65722079 	.word	0x65722079
1a002370:	73657267 	.word	0x73657267
1a002374:	61207261 	.word	0x61207261
1a002378:	656d206c 	.word	0x656d206c
1a00237c:	6120756e 	.word	0x6120756e
1a002380:	7265746e 	.word	0x7265746e
1a002384:	2e726f69 	.word	0x2e726f69
1a002388:	000a0a0d 	.word	0x000a0a0d
1a00238c:	6f432e31 	.word	0x6f432e31
1a002390:	6769666e 	.word	0x6769666e
1a002394:	72617275 	.word	0x72617275
1a002398:	66756220 	.word	0x66756220
1a00239c:	73726566 	.word	0x73726566
1a0023a0:	2e320a0d 	.word	0x2e320a0d
1a0023a4:	656c6553 	.word	0x656c6553
1a0023a8:	6f696363 	.word	0x6f696363
1a0023ac:	2072616e 	.word	0x2072616e
1a0023b0:	756c6f76 	.word	0x756c6f76
1a0023b4:	206e656d 	.word	0x206e656d
1a0023b8:	63206564 	.word	0x63206564
1a0023bc:	6574726f 	.word	0x6574726f
1a0023c0:	2e330a0d 	.word	0x2e330a0d
1a0023c4:	706d694c 	.word	0x706d694c
1a0023c8:	20726169 	.word	0x20726169
1a0023cc:	626d6f62 	.word	0x626d6f62
1a0023d0:	340a0d61 	.word	0x340a0d61
1a0023d4:	6765522e 	.word	0x6765522e
1a0023d8:	61736572 	.word	0x61736572
1a0023dc:	6c612072 	.word	0x6c612072
1a0023e0:	6e656d20 	.word	0x6e656d20
1a0023e4:	6e612075 	.word	0x6e612075
1a0023e8:	69726574 	.word	0x69726574
1a0023ec:	0a0d726f 	.word	0x0a0d726f
1a0023f0:	0000000a 	.word	0x0000000a
1a0023f4:	65206e45 	.word	0x65206e45
1a0023f8:	20617473 	.word	0x20617473
1a0023fc:	746e6170 	.word	0x746e6170
1a002400:	616c6c61 	.word	0x616c6c61
1a002404:	20657320 	.word	0x20657320
1a002408:	72646f70 	.word	0x72646f70
1a00240c:	61632061 	.word	0x61632061
1a002410:	72616772 	.word	0x72616772
1a002414:	206c6520 	.word	0x206c6520
1a002418:	6f6c6176 	.word	0x6f6c6176
1a00241c:	6f632072 	.word	0x6f632072
1a002420:	73657272 	.word	0x73657272
1a002424:	646e6f70 	.word	0x646e6f70
1a002428:	746e6569 	.word	0x746e6569
1a00242c:	20612065 	.word	0x20612065
1a002430:	61646163 	.word	0x61646163
1a002434:	6f6e7520 	.word	0x6f6e7520
1a002438:	20656420 	.word	0x20656420
1a00243c:	20736f6c 	.word	0x20736f6c
1a002440:	73657274 	.word	0x73657274
1a002444:	74617020 	.word	0x74617020
1a002448:	656e6f72 	.word	0x656e6f72
1a00244c:	62282073 	.word	0x62282073
1a002450:	65666675 	.word	0x65666675
1a002454:	20297372 	.word	0x20297372
1a002458:	74752061 	.word	0x74752061
1a00245c:	7a696c69 	.word	0x7a696c69
1a002460:	65207261 	.word	0x65207261
1a002464:	616c206e 	.word	0x616c206e
1a002468:	6c616320 	.word	0x6c616320
1a00246c:	61726269 	.word	0x61726269
1a002470:	6e6f6963 	.word	0x6e6f6963
1a002474:	000a0d2e 	.word	0x000a0d2e
1a002478:	73657250 	.word	0x73657250
1a00247c:	656e6f69 	.word	0x656e6f69
1a002480:	70203420 	.word	0x70203420
1a002484:	20617261 	.word	0x20617261
1a002488:	616e6966 	.word	0x616e6966
1a00248c:	617a696c 	.word	0x617a696c
1a002490:	20792072 	.word	0x20792072
1a002494:	72676572 	.word	0x72676572
1a002498:	72617365 	.word	0x72617365
1a00249c:	206c6120 	.word	0x206c6120
1a0024a0:	756e656d 	.word	0x756e656d
1a0024a4:	746e6120 	.word	0x746e6120
1a0024a8:	6f697265 	.word	0x6f697265
1a0024ac:	0a0d2e72 	.word	0x0a0d2e72
1a0024b0:	0000000a 	.word	0x0000000a
1a0024b4:	65206e45 	.word	0x65206e45
1a0024b8:	20617473 	.word	0x20617473
1a0024bc:	746e6170 	.word	0x746e6170
1a0024c0:	616c6c61 	.word	0x616c6c61
1a0024c4:	20657320 	.word	0x20657320
1a0024c8:	72646f70 	.word	0x72646f70
1a0024cc:	61632061 	.word	0x61632061
1a0024d0:	72616772 	.word	0x72616772
1a0024d4:	206c6520 	.word	0x206c6520
1a0024d8:	6f6c6176 	.word	0x6f6c6176
1a0024dc:	6f632072 	.word	0x6f632072
1a0024e0:	73657272 	.word	0x73657272
1a0024e4:	646e6f70 	.word	0x646e6f70
1a0024e8:	746e6569 	.word	0x746e6569
1a0024ec:	6c612065 	.word	0x6c612065
1a0024f0:	6c6f7620 	.word	0x6c6f7620
1a0024f4:	6e656d75 	.word	0x6e656d75
1a0024f8:	20656420 	.word	0x20656420
1a0024fc:	74726f63 	.word	0x74726f63
1a002500:	0a0d2e65 	.word	0x0a0d2e65
1a002504:	00000000 	.word	0x00000000
1a002508:	706d694c 	.word	0x706d694c
1a00250c:	646e6169 	.word	0x646e6169
1a002510:	616c206f 	.word	0x616c206f
1a002514:	6d6f6220 	.word	0x6d6f6220
1a002518:	2e2e6162 	.word	0x2e2e6162
1a00251c:	000a0d2e 	.word	0x000a0d2e
1a002520:	65206e45 	.word	0x65206e45
1a002524:	20617473 	.word	0x20617473
1a002528:	746e6170 	.word	0x746e6170
1a00252c:	616c6c61 	.word	0x616c6c61
1a002530:	20657320 	.word	0x20657320
1a002534:	74736f6d 	.word	0x74736f6d
1a002538:	61726172 	.word	0x61726172
1a00253c:	6f6c206e 	.word	0x6f6c206e
1a002540:	61642073 	.word	0x61642073
1a002544:	20736f74 	.word	0x20736f74
1a002548:	61726170 	.word	0x61726170
1a00254c:	6e6f6320 	.word	0x6e6f6320
1a002550:	61746365 	.word	0x61746365
1a002554:	20657372 	.word	0x20657372
1a002558:	64206c61 	.word	0x64206c61
1a00255c:	6f707369 	.word	0x6f707369
1a002560:	69746973 	.word	0x69746973
1a002564:	6d206f76 	.word	0x6d206f76
1a002568:	61696465 	.word	0x61696465
1a00256c:	2065746e 	.word	0x2065746e
1a002570:	20616e75 	.word	0x20616e75
1a002574:	20646572 	.word	0x20646572
1a002578:	69666977 	.word	0x69666977
1a00257c:	000a0d2e 	.word	0x000a0d2e

1a002580 <ExtRateIn>:
1a002580:	00000000                                ....

1a002584 <GpioButtons>:
1a002584:	08000400 09010900                       ........

1a00258c <GpioLeds>:
1a00258c:	01050005 0e000205 0c010b01              ............

1a002598 <GpioPorts>:
1a002598:	03030003 0f050403 05031005 07030603     ................
1a0025a8:	ffff0802                                ....

1a0025ac <OscRateIn>:
1a0025ac:	00b71b00                                ....

1a0025b0 <InitClkStates>:
1a0025b0:	01010f01                                ....

1a0025b4 <pinmuxing>:
1a0025b4:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0025c4:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0025d4:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0025e4:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0025f4:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002604:	00d50301 00d50401 00160107 00560207     ..............V.
1a002614:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002624:	00570206                                ..W.

1a002628 <UART_BClock>:
1a002628:	01a201c2 01620182                       ......b.

1a002630 <UART_PClock>:
1a002630:	00820081 00a200a1 08040201 0f0f0f03     ................
1a002640:	000000ff                                ....

1a002644 <periph_to_base>:
1a002644:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002654:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002664:	000100e0 01000100 01200003 00060120     .......... . ...
1a002674:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002684:	01820013 00120182 01a201a2 01c20011     ................
1a002694:	001001c2 01e201e2 0202000f 000e0202     ................
1a0026a4:	02220222 0223000d 001c0223              "."...#.#...

1a0026b0 <InitClkStates>:
1a0026b0:	00010100 00010909 0001090a 01010701     ................
1a0026c0:	00010902 00010906 0101090c 0001090d     ................
1a0026d0:	0001090e 0001090f 00010910 00010911     ................
1a0026e0:	00010912 00010913 00011114 00011119     ................
1a0026f0:	0001111a 0001111b                       ........

1a0026f8 <lpcUarts>:
1a0026f8:	40081000 06020406 00180205 40081000     ...@...........@
1a002708:	09070509 00180706 40082000 00000000     ......... .@....
1a002718:	00190000 400c1000 07060107 001a0602     .......@........
1a002728:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002738:	02020302 001b0204                       ........

1a002740 <gpioPinsInit>:
1a002740:	02000104 00050701 05010d03 04080100     ................
1a002750:	02020002 02000304 00000403 04070002     ................
1a002760:	030c0300 09050402 05040103 04030208     ................
1a002770:	04020305 06040504 0802000c 03000b06     ................
1a002780:	00090607 07060503 060f0504 03030004     ................
1a002790:	02000404 00050404 06040502 04060200     ................
1a0027a0:	0c050408 05040a04 0003010e 14010a00     ................
1a0027b0:	010f0000 0d000012 00001101 0010010c     ................
1a0027c0:	07070300 000f0300 01000001 00000000     ................
1a0027d0:	000a0600 08060603 06100504 04030005     ................
1a0027e0:	03000106 04090400 04010d05 010b0000     ................
1a0027f0:	0200000f 00000001 00010104 02010800     ................
1a002800:	01090000 09010006 05040002 04010200     ................
1a002810:	02020105 02020504 0e00000a 01000b02     ................
1a002820:	000c020b ffff0c01                       ........
